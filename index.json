{"repository_name":"anyolite","body":"# Anyolite\n\nAnyolite is a Crystal shard which adds a fully functional mruby interpreter to Crystal.\n\n![Test](https://github.com/Anyolite/anyolite/workflows/Test/badge.svg)\n\n![Release](https://img.shields.io/github/v/release/Anyolite/anyolite)\n![ReleaseDate](https://img.shields.io/github/release-date/Anyolite/anyolite)\n\n![License](https://img.shields.io/github/license/Anyolite/anyolite)\n\n# Description\n\nAnyolite allows for wrapping Crystal classes and functions into mruby with little effort.\nThis way, mruby can be used as a scripting language to Crystal projects, with the major advantage of a similar syntax.\n\nThis project is currently in active development, so please report any bugs or missing relevant features.\n\n# Features\n\n* Bindings to an mruby interpreter\n* Wrapping of nearly arbitrary Crystal classes and methods to mruby\n* Easy syntax without unnecessary boilerplate code\n* Simple system to prevent garbage collector conflicts\n* Support for keyword arguments and default values\n* Objects, structs, enums and unions as function arguments and return values are completely valid\n* Methods and constants can be excluded, modified or renamed with annotations\n\n# Prerequisites\n\nYou need to have the following programs installed (and in your PATH variable, if you are on Windows):\n* Ruby (for building mruby)\n* Rake (for building the whole project)\n* Bison (for building mruby)\n* Git (for downloading mruby)\n* GCC or Microsoft Visual Studio 19 (for building the object files required for Anyolite, depending on your OS)\n\n# Installing\n\nPut this shard as a requirement into your shard.yml project file and then call\n```bash\nshards install\n```\nfrom a terminal or the MSVC Developer Console (on Windows).\n\nAlternatively, you can clone this repository into the lib folder of your project and run\n```bash\nrake build_shard\n```\nmanually to install the shard without using the crystal shards program.\n\nIf you want to use other options for Anyolite, you can set `ANYOLITE_CONFIG_PATH` to the filename of a JSON config file,\nwhich allows for changing multiple options when installing the shard. Possible options are:\n\n* `ANYOLITE_BUILDPATH` - The relative directory in which Anyolite will be built\n* `ANYOLITE_MRUBY_FORK` - The web address of the mruby repository\n* `ANYOLITE_MRUBY_RELEASE` - The release tag of the mruby version to be used\n* `ANYOLITE_MRUBY_DIR` - The relative directory mruby will be installed in\n* `ANYOLITE_MRUBY_CONFIG_PATH` - The config file which is used for building mruby\n* `ANYOLITE_COMPILER` - The C compiler used for building Anyolite\n\n# How to use\n\nImagine a Crystal class for a really bad RPG:\n\n```crystal\nmodule TestModule\n  class Entity\n    property hp : Int32 = 0\n\n    def initialize(@hp)\n    end\n\n    def damage(diff : Int32)\n      @hp -= diff\n    end\n\n    def yell(sound : String, loud : Bool = false)\n      if loud\n        puts \"Entity yelled: #{sound.upcase}\"\n      else\n        puts \"Entity yelled: #{sound}\"\n      end\n    end\n\n    def absorb_hp_from(other : Entity)\n      @hp += other.hp\n      other.hp = 0\n    end\n  end\nend\n```\n\nNow, you want to wrap this class in Ruby. All you need to do is to execute the following code in Crystal (current commit; see documentation page for the version of the latest release):\n\n```crystal\nrequire \"anyolite\"\n\nMrbState.create do |mrb|\n  MrbWrap.wrap(mrb, TestModule)\n\n  mrb.load_script_from_file(\"examples/hp_example.rb\")\nend\n```\n\nWell, that's it already. \nThe last line in the block calls the following example script:\n\n```ruby\na = TestModule::Entity.new(hp: 20)\na.damage(diff: 13)\nputs a.hp\n\nb = TestModule::Entity.new(hp: 10)\na.absorb_hp_from(other: b)\nputs a.hp\nputs b.hp\nb.yell(sound: 'Ouch, you stole my HP!', loud: true)\na.yell(sound: 'Well, take better care of your public attributes!')\n```\n\nThe example above gives a good overview over the things you can already do with Anyolite.\nMore features will be added in the future.\n\n# Limitations\n\n* Currently, Anyolite does not work on Windows due to Crystal compiler bugs\n* Arrays and hashes are not directly supported\n* Symbols do not work due to their compiletime nature in Crystal\n* Splat arguments and arbitrary keywords are not possible due to their reliance on symbols\n* Keywords will always be given to functions, even if optional (then with default values)\n* Non-keyword function arguments are always set to their default values before receiving their final values\n* Default arguments need to be specialized with their full class and module path in order to work\n* Private constants need to be excluded in order to prevent errors\n\n# Why this name?\n\nhttps://en.wikipedia.org/wiki/Anyolite\n\nIn short, it is a rare variant of the crystalline mineral called zoisite, with ruby and other crystal shards (of pargasite) embedded.\n\nThe term 'anyoli' means 'green' in the Maasai language, thus naming 'anyolite'.\n\n# Roadmap\n\n## Upcoming releases\n\n### Version 0.9.0\n\n#### Features\n\n* [ ] Additional compatibility layer between Anyolite and mruby\n* [ ] More configuration options\n\n#### Breaking changes\n\n* [ ] Rename `MrbWrap` to `Anyolite`\n* [ ] Rename `MrbMacro` to `Anyolite::Macro`\n* [ ] Rename `mrb` and `mruby` in the code to `rb` and `ruby`\n* [ ] Rework configurations for the Rakefile into a class\n\n#### Usability\n\n* [ ] Split macro source file into smaller parts\n* [ ] Update documentation to new code\n\n### Version 0.10.0\n\nThis version is planned to be the last feature release before 1.0.0.\nCurrently, the way its features are going to be implemented is not yet determined,\nso it will probably take some time before it will be released.\n\n* [ ] Options for inherited and/or inheriting classes\n\n### Version 1.0.0\n\n* [ ] Windows support (currently not supported due to problems with Crystal)\n* [ ] Crystal specs for testing\n* [ ] Documentation of all relevant features and wrappers\n* [ ] Mac support (might be possible, not tested yet)\n* [ ] More configuration options for the Rakefile\n\n### Future ideas (might not actually be possible to implement)\n\n* [ ] Arrays and/or hashes as argument and return values\n* [ ] Splat argument and/or arbitrary keyword passing\n* [ ] Method in mruby to determine owner of object\n* [ ] Support for procs and/or pointers\n\n","program":{"html_id":"anyolite/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"anyolite","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"anyolite/MrbCast","path":"MrbCast.html","kind":"module","full_name":"MrbCast","name":"MrbCast","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbCast.cr","line_number":2,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L2"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Module for specific casts of Crystal values into mruby values","summary":"<p>Module for specific casts of Crystal values into mruby values</p>","class_methods":[{"id":"cast_to_bool(mrb:Pointer(MrbInternal::MrbState),value:MrbInternal::MrbValue)-class-method","html_id":"cast_to_bool(mrb:Pointer(MrbInternal::MrbState),value:MrbInternal::MrbValue)-class-method","name":"cast_to_bool","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : MrbInternal::MrbValue)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":135,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L135"},"def":{"name":"cast_to_bool","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if MrbCast.check_for_true(value)\n  true\nelse\n  if MrbCast.check_for_false(value)\n    false\n  else\n    MrbInternal.mrb_raise_argument_error(mrb, \"Could not cast #{value} to Bool.\")\n    false\n  end\nend"}},{"id":"cast_to_float(mrb:Pointer(MrbInternal::MrbState),value:MrbInternal::MrbValue)-class-method","html_id":"cast_to_float(mrb:Pointer(MrbInternal::MrbState),value:MrbInternal::MrbValue)-class-method","name":"cast_to_float","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : MrbInternal::MrbValue)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":155,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L155"},"def":{"name":"cast_to_float","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if MrbCast.check_for_float(value)\n  MrbInternal.get_mrb_float(value)\nelse\n  MrbInternal.mrb_raise_argument_error(mrb, \"Could not cast #{value} to Float.\")\n  0.0\nend"}},{"id":"cast_to_int(mrb:Pointer(MrbInternal::MrbState),value:MrbInternal::MrbValue)-class-method","html_id":"cast_to_int(mrb:Pointer(MrbInternal::MrbState),value:MrbInternal::MrbValue)-class-method","name":"cast_to_int","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : MrbInternal::MrbValue)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":146,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L146"},"def":{"name":"cast_to_int","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if MrbCast.check_for_fixnum(value)\n  MrbInternal.get_mrb_fixnum(value)\nelse\n  MrbInternal.mrb_raise_argument_error(mrb, \"Could not cast #{value} to Int.\")\n  0\nend"}},{"id":"cast_to_nil(mrb:Pointer(MrbInternal::MrbState),value:MrbInternal::MrbValue)-class-method","html_id":"cast_to_nil(mrb:Pointer(MrbInternal::MrbState),value:MrbInternal::MrbValue)-class-method","name":"cast_to_nil","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : MrbInternal::MrbValue)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":126,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L126"},"def":{"name":"cast_to_nil","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if MrbCast.check_for_nil(value)\n  nil\nelse\n  MrbInternal.mrb_raise_argument_error(mrb, \"Could not cast #{value} to Nil.\")\n  nil\nend"}},{"id":"cast_to_string(mrb:Pointer(MrbInternal::MrbState),value:MrbInternal::MrbValue)-class-method","html_id":"cast_to_string(mrb:Pointer(MrbInternal::MrbState),value:MrbInternal::MrbValue)-class-method","name":"cast_to_string","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : MrbInternal::MrbValue)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":164,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L164"},"def":{"name":"cast_to_string","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if MrbCast.check_for_string(value)\n  String.new(MrbInternal.get_mrb_string(mrb, value))\nelse\n  MrbInternal.mrb_raise_argument_error(mrb, \"Could not cast #{value} to String.\")\n  \"\"\nend"}},{"id":"check_for_bool(value:MrbInternal::MrbValue)-class-method","html_id":"check_for_bool(value:MrbInternal::MrbValue)-class-method","name":"check_for_bool","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(value : MrbInternal::MrbValue)","args_html":"(value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":106,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L106"},"def":{"name":"check_for_bool","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(MrbCast.check_for_true(value)) || (MrbCast.check_for_false(value))"}},{"id":"check_for_data(value:MrbInternal::MrbValue)-class-method","html_id":"check_for_data(value:MrbInternal::MrbValue)-class-method","name":"check_for_data","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(value : MrbInternal::MrbValue)","args_html":"(value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":122,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L122"},"def":{"name":"check_for_data","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(MrbInternal.check_mrb_data(value)) != 0"}},{"id":"check_for_false(value:MrbInternal::MrbValue)-class-method","html_id":"check_for_false(value:MrbInternal::MrbValue)-class-method","name":"check_for_false","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(value : MrbInternal::MrbValue)","args_html":"(value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":102,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L102"},"def":{"name":"check_for_false","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(MrbInternal.check_mrb_false(value)) != 0"}},{"id":"check_for_fixnum(value:MrbInternal::MrbValue)-class-method","html_id":"check_for_fixnum(value:MrbInternal::MrbValue)-class-method","name":"check_for_fixnum","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(value : MrbInternal::MrbValue)","args_html":"(value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":110,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L110"},"def":{"name":"check_for_fixnum","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(MrbInternal.check_mrb_fixnum(value)) != 0"}},{"id":"check_for_float(value:MrbInternal::MrbValue)-class-method","html_id":"check_for_float(value:MrbInternal::MrbValue)-class-method","name":"check_for_float","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(value : MrbInternal::MrbValue)","args_html":"(value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":114,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L114"},"def":{"name":"check_for_float","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(MrbInternal.check_mrb_float(value)) != 0"}},{"id":"check_for_nil(value:MrbInternal::MrbValue)-class-method","html_id":"check_for_nil(value:MrbInternal::MrbValue)-class-method","name":"check_for_nil","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(value : MrbInternal::MrbValue)","args_html":"(value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":94,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L94"},"def":{"name":"check_for_nil","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(MrbInternal.check_mrb_nil(value)) != 0"}},{"id":"check_for_string(value:MrbInternal::MrbValue)-class-method","html_id":"check_for_string(value:MrbInternal::MrbValue)-class-method","name":"check_for_string","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(value : MrbInternal::MrbValue)","args_html":"(value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":118,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L118"},"def":{"name":"check_for_string","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(MrbInternal.check_mrb_string(value)) != 0"}},{"id":"check_for_true(value:MrbInternal::MrbValue)-class-method","html_id":"check_for_true(value:MrbInternal::MrbValue)-class-method","name":"check_for_true","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(value : MrbInternal::MrbValue)","args_html":"(value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":98,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L98"},"def":{"name":"check_for_true","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(MrbInternal.check_mrb_true(value)) != 0"}},{"id":"check_for_undef(value:MrbInternal::MrbValue)-class-method","html_id":"check_for_undef(value:MrbInternal::MrbValue)-class-method","name":"check_for_undef","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"args_string":"(value : MrbInternal::MrbValue)","args_html":"(value : MrbInternal::MrbValue)","location":{"filename":"src/MrbCast.cr","line_number":90,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L90"},"def":{"name":"check_for_undef","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"MrbInternal::MrbValue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(MrbInternal.check_mrb_undef(value)) != 0"}},{"id":"is_undef?(value)-class-method","html_id":"is_undef?(value)-class-method","name":"is_undef?","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/MrbCast.cr","line_number":177,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L177"},"def":{"name":"is_undef?","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if value.is_a?(MrbInternal::MrbValue)\n  MrbCast.check_for_undef(value)\nelse\n  false\nend"}},{"id":"return_bool(value)-class-method","html_id":"return_bool(value)-class-method","name":"return_bool","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/MrbCast.cr","line_number":21,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L21"},"def":{"name":"return_bool","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return MrbInternal.get_bool_value(value ? 1 : 0)"}},{"id":"return_false-class-method","html_id":"return_false-class-method","name":"return_false","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/MrbCast.cr","line_number":13,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L13"},"def":{"name":"return_false","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return MrbInternal.get_false_value"}},{"id":"return_fixnum(value)-class-method","html_id":"return_fixnum(value)-class-method","name":"return_fixnum","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/MrbCast.cr","line_number":17,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L17"},"def":{"name":"return_fixnum","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return MrbInternal.get_fixnum_value(value)"}},{"id":"return_float(mrb,value)-class-method","html_id":"return_float(mrb,value)-class-method","name":"return_float","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(mrb, value)","args_html":"(mrb, value)","location":{"filename":"src/MrbCast.cr","line_number":25,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L25"},"def":{"name":"return_float","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return MrbInternal.get_float_value(mrb, value)"}},{"id":"return_nil-class-method","html_id":"return_nil-class-method","name":"return_nil","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/MrbCast.cr","line_number":5,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L5"},"def":{"name":"return_nil","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return MrbInternal.get_nil_value"}},{"id":"return_string(mrb,value)-class-method","html_id":"return_string(mrb,value)-class-method","name":"return_string","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(mrb, value)","args_html":"(mrb, value)","location":{"filename":"src/MrbCast.cr","line_number":29,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L29"},"def":{"name":"return_string","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return MrbInternal.get_string_value(mrb, value)"}},{"id":"return_true-class-method","html_id":"return_true-class-method","name":"return_true","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/MrbCast.cr","line_number":9,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L9"},"def":{"name":"return_true","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return MrbInternal.get_true_value"}},{"id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Object)-class-method","html_id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Object)-class-method","name":"return_value","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Object"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : Object)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : Object)","location":{"filename":"src/MrbCast.cr","line_number":72,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L72"},"def":{"name":"return_value","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Object"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ruby_class = MrbClassCache.get(typeof(value))\ndestructor = MrbTypeCache.destructor_method(typeof(value))\nptr = Pointer(typeof(value)).malloc(size: 1, value: value)\nnew_ruby_object = MrbInternal.new_empty_object(mrb, ruby_class, ptr.as(::Pointer(Void)), MrbTypeCache.register(typeof(value), destructor))\n(MrbMacro.convert_from_ruby_object(mrb, new_ruby_object, typeof(value))).value = value\nMrbRefTable.add(MrbRefTable.get_object_id(value), ptr.as(::Pointer(Void)))\nreturn new_ruby_object\n"}},{"id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Struct)-class-method","html_id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Struct)-class-method","name":"return_value","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Struct"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : Struct)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : Struct)","location":{"filename":"src/MrbCast.cr","line_number":55,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L55"},"def":{"name":"return_value","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Struct"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ruby_class = MrbClassCache.get(typeof(value))\ndestructor = MrbTypeCache.destructor_method(typeof(value))\nptr = Pointer(typeof(value)).malloc(size: 1, value: value)\nnew_ruby_object = MrbInternal.new_empty_object(mrb, ruby_class, ptr.as(::Pointer(Void)), MrbTypeCache.register(typeof(value), destructor))\nstruct_wrapper = MrbMacro.convert_from_ruby_struct(mrb, new_ruby_object, typeof(value))\nstruct_wrapper.value = MrbWrap::StructWrapper(typeof(value)).new(value)\nMrbRefTable.add(MrbRefTable.get_object_id(struct_wrapper.value), ptr.as(::Pointer(Void)))\nreturn new_ruby_object\n"}},{"id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:String)-class-method","html_id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:String)-class-method","name":"return_value","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : String)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : String)","location":{"filename":"src/MrbCast.cr","line_number":51,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L51"},"def":{"name":"return_value","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.return_string(mrb, value)"}},{"id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Float)-class-method","html_id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Float)-class-method","name":"return_value","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : Float)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : Float)","location":{"filename":"src/MrbCast.cr","line_number":47,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L47"},"def":{"name":"return_value","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.return_float(mrb, value)"}},{"id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Int)-class-method","html_id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Int)-class-method","name":"return_value","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : Int)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : Int)","location":{"filename":"src/MrbCast.cr","line_number":43,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L43"},"def":{"name":"return_value","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.return_fixnum(value)"}},{"id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Bool)-class-method","html_id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Bool)-class-method","name":"return_value","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : Bool)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : Bool)","location":{"filename":"src/MrbCast.cr","line_number":39,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L39"},"def":{"name":"return_value","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value ? self.return_true : return_false"}},{"id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Nil)-class-method","html_id":"return_value(mrb:Pointer(MrbInternal::MrbState),value:Nil)-class-method","name":"return_value","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Nil"}],"args_string":"(mrb : Pointer(MrbInternal::MrbState), value : Nil)","args_html":"(mrb : Pointer(MrbInternal::MrbState), value : Nil)","location":{"filename":"src/MrbCast.cr","line_number":35,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L35"},"def":{"name":"return_value","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"::Pointer(MrbInternal::MrbState)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.return_nil"}}],"constructors":[],"instance_methods":[],"macros":[{"id":"check_custom_type(mrb,value,crystal_type)-macro","html_id":"check_custom_type(mrb,value,crystal_type)-macro","name":"check_custom_type","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"crystal_type","doc":null,"default_value":"","external_name":"crystal_type","restriction":""}],"args_string":"(mrb, value, crystal_type)","location":{"filename":"src/MrbCast.cr","line_number":173,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbCast.cr#L173"},"def":{"name":"check_custom_type","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"crystal_type","doc":null,"default_value":"","external_name":"crystal_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbInternal.mrb_obj_is_kind_of(\n{{ mrb }}\n, \n{{ value }}\n, MrbClassCache.get(\n{{ crystal_type }}\n)) != 0\n  \n"}}],"types":[]},{"html_id":"anyolite/MrbClass","path":"MrbClass.html","kind":"class","full_name":"MrbClass","name":"MrbClass","abstract":false,"superclass":{"html_id":"anyolite/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"anyolite/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"anyolite/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/MrbClass.cr","line_number":2,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbClass.cr#L2"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Reference to a mruby class","summary":"<p>Reference to a mruby class</p>","class_methods":[],"constructors":[{"id":"new(mrb:MrbState,name:String,superclass:MrbClass?=nil,under:MrbModule|MrbClass|Nil=nil)-class-method","html_id":"new(mrb:MrbState,name:String,superclass:MrbClass?=nil,under:MrbModule|MrbClass|Nil=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"MrbState"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"superclass","doc":null,"default_value":"nil","external_name":"superclass","restriction":"MrbClass | Nil"},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":"MrbModule | MrbClass | Nil"}],"args_string":"(mrb : MrbState, name : String, superclass : MrbClass? = <span class=\"n\">nil</span>, under : MrbModule | MrbClass | Nil = <span class=\"n\">nil</span>)","args_html":"(mrb : <a href=\"MrbState.html\">MrbState</a>, name : String, superclass : <a href=\"MrbClass.html\">MrbClass</a>? = <span class=\"n\">nil</span>, under : <a href=\"MrbModule.html\">MrbModule</a> | <a href=\"MrbClass.html\">MrbClass</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbClass.cr","line_number":5,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbClass.cr#L5"},"def":{"name":"new","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"MrbState"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"superclass","doc":null,"default_value":"nil","external_name":"superclass","restriction":"MrbClass | Nil"},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":"MrbModule | MrbClass | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(mrb, name, superclass, under)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"to_unsafe-instance-method","html_id":"to_unsafe-instance-method","name":"to_unsafe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/MrbClass.cr","line_number":14,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbClass.cr#L14"},"def":{"name":"to_unsafe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return @class_ptr"}}],"macros":[],"types":[]},{"html_id":"anyolite/MrbClassCache","path":"MrbClassCache.html","kind":"module","full_name":"MrbClassCache","name":"MrbClassCache","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbClassCache.cr","line_number":2,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbClassCache.cr#L2"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Cache for mruby class and module references","summary":"<p>Cache for mruby class and module references</p>","class_methods":[{"id":"get(n:Nil)-class-method","html_id":"get(n:Nil)-class-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Nil"}],"args_string":"(n : Nil)","args_html":"(n : Nil)","location":{"filename":"src/MrbClassCache.cr","line_number":13,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbClassCache.cr#L13"},"def":{"name":"get","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"nil"}},{"id":"get(crystal_class:Class)-class-method","html_id":"get(crystal_class:Class)-class-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":"Class"}],"args_string":"(crystal_class : Class)","args_html":"(crystal_class : Class)","location":{"filename":"src/MrbClassCache.cr","line_number":21,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbClassCache.cr#L21"},"def":{"name":"get","args":[{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":"Class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @@cache[crystal_class.name]?\n  return @@cache[crystal_class.name]\nelse\n  raise(\"Uncached class or module: #{crystal_class}\")\nend"}},{"id":"get(ruby_module:MrbModule)-class-method","html_id":"get(ruby_module:MrbModule)-class-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"ruby_module","doc":null,"default_value":"","external_name":"ruby_module","restriction":"MrbModule"}],"args_string":"(ruby_module : MrbModule)","args_html":"(ruby_module : <a href=\"MrbModule.html\">MrbModule</a>)","location":{"filename":"src/MrbClassCache.cr","line_number":17,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbClassCache.cr#L17"},"def":{"name":"get","args":[{"name":"ruby_module","doc":null,"default_value":"","external_name":"ruby_module","restriction":"MrbModule"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ruby_module"}},{"id":"register(crystal_class:Class,mrb_class:MrbClass)-class-method","html_id":"register(crystal_class:Class,mrb_class:MrbClass)-class-method","name":"register","doc":null,"summary":null,"abstract":false,"args":[{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":"Class"},{"name":"mrb_class","doc":null,"default_value":"","external_name":"mrb_class","restriction":"MrbClass"}],"args_string":"(crystal_class : Class, mrb_class : MrbClass)","args_html":"(crystal_class : Class, mrb_class : <a href=\"MrbClass.html\">MrbClass</a>)","location":{"filename":"src/MrbClassCache.cr","line_number":5,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbClassCache.cr#L5"},"def":{"name":"register","args":[{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":"Class"},{"name":"mrb_class","doc":null,"default_value":"","external_name":"mrb_class","restriction":"MrbClass"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@cache[crystal_class.name] = mrb_class"}},{"id":"register(crystal_module:Class,mrb_module:MrbModule)-class-method","html_id":"register(crystal_module:Class,mrb_module:MrbModule)-class-method","name":"register","doc":null,"summary":null,"abstract":false,"args":[{"name":"crystal_module","doc":null,"default_value":"","external_name":"crystal_module","restriction":"Class"},{"name":"mrb_module","doc":null,"default_value":"","external_name":"mrb_module","restriction":"MrbModule"}],"args_string":"(crystal_module : Class, mrb_module : MrbModule)","args_html":"(crystal_module : Class, mrb_module : <a href=\"MrbModule.html\">MrbModule</a>)","location":{"filename":"src/MrbClassCache.cr","line_number":9,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbClassCache.cr#L9"},"def":{"name":"register","args":[{"name":"crystal_module","doc":null,"default_value":"","external_name":"crystal_module","restriction":"Class"},{"name":"mrb_module","doc":null,"default_value":"","external_name":"mrb_module","restriction":"MrbModule"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@cache[crystal_module.name] = mrb_module"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbFunc","path":"MrbFunc.html","kind":"alias","full_name":"MrbFunc","name":"MrbFunc","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":13,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L13"}],"repository_name":"anyolite","program":false,"enum":false,"alias":true,"aliased":"Proc(Pointer(MrbInternal::MrbState), MrbInternal::MrbValue, MrbInternal::MrbValue)","aliased_html":"Pointer(MrbInternal::MrbState), MrbInternal::MrbValue -> MrbInternal::MrbValue","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Alias for the mruby function pointers.","summary":"<p>Alias for the mruby function pointers.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbMacro","path":"MrbMacro.html","kind":"module","full_name":"MrbMacro","name":"MrbMacro","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbMacro.cr","line_number":2,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L2"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Helper methods which should not be used for trivial cases in the final version","summary":"<p>Helper methods which should not be used for trivial cases in the final version</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"add_default_constructor(mrb_state,crystal_class,verbose)-macro","html_id":"add_default_constructor(mrb_state,crystal_class,verbose)-macro","name":"add_default_constructor","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"verbose","doc":null,"default_value":"","external_name":"verbose","restriction":""}],"args_string":"(mrb_state, crystal_class, verbose)","location":{"filename":"src/MrbMacro.cr","line_number":1083,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L1083"},"def":{"name":"add_default_constructor","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"verbose","doc":null,"default_value":"","external_name":"verbose","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if verbose\n  puts(\"> Adding constructor for #{crystal_class}\\n\\n\")\nend %}\n\n    MrbWrap.wrap_constructor(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n)\n  \n"}},{"id":"add_enum_constructor(mrb_state,crystal_class,verbose)-macro","html_id":"add_enum_constructor(mrb_state,crystal_class,verbose)-macro","name":"add_enum_constructor","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"verbose","doc":null,"default_value":"","external_name":"verbose","restriction":""}],"args_string":"(mrb_state, crystal_class, verbose)","location":{"filename":"src/MrbMacro.cr","line_number":1088,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L1088"},"def":{"name":"add_enum_constructor","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"verbose","doc":null,"default_value":"","external_name":"verbose","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if verbose\n  puts(\"> Adding enum constructor for #{crystal_class}\\n\\n\")\nend %}\n\n    MrbWrap.wrap_constructor(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n, [Int32])\n  \n"}},{"id":"allocate_constructed_object(crystal_class,obj,new_obj)-macro","html_id":"allocate_constructed_object(crystal_class,obj,new_obj)-macro","name":"allocate_constructed_object","doc":null,"summary":null,"abstract":false,"args":[{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":""},{"name":"new_obj","doc":null,"default_value":"","external_name":"new_obj","restriction":""}],"args_string":"(crystal_class, obj, new_obj)","location":{"filename":"src/MrbMacro.cr","line_number":576,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L576"},"def":{"name":"allocate_constructed_object","args":[{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":""},{"name":"new_obj","doc":null,"default_value":"","external_name":"new_obj","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n# Call initializer method if available\n\n    if new_obj.responds_to?(:mrb_initialize)\n      new_obj.mrb_initialize(mrb)\n    \nend\n\n    \n# Allocate memory so we do not lose this object\n\n    if \n{{ crystal_class }}\n <= Struct\n      struct_wrapper = MrbWrap::StructWrapper(\n{{ crystal_class }}\n).new(\n{{ new_obj }}\n)\n      new_obj_ptr = Pointer(MrbWrap::StructWrapper(\n{{ crystal_class }}\n)).malloc(size: 1, value: struct_wrapper)\n      MrbRefTable.add(MrbRefTable.get_object_id(new_obj_ptr.value), new_obj_ptr.as(Void*))\n\n      puts \"> S: \n{{ crystal_class }}\n: #{new_obj_ptr.value.inspect}\" if MrbRefTable.option_active?(:logging)\n\n      destructor = MrbTypeCache.destructor_method(\n{{ crystal_class }}\n)\n      MrbInternal.set_data_ptr_and_type(\n{{ obj }}\n, new_obj_ptr, MrbTypeCache.register(\n{{ crystal_class }}\n, destructor))\n    \nelse\n      new_obj_ptr = Pointer(\n{{ crystal_class }}\n).malloc(size: 1, value: \n{{ new_obj }}\n)\n      MrbRefTable.add(MrbRefTable.get_object_id(new_obj_ptr.value), new_obj_ptr.as(Void*))\n\n      puts \"> C: \n{{ crystal_class }}\n: #{new_obj_ptr.value.inspect}\" if MrbRefTable.option_active?(:logging)\n\n      destructor = MrbTypeCache.destructor_method(\n{{ crystal_class }}\n)\n      MrbInternal.set_data_ptr_and_type(\n{{ obj }}\n, new_obj_ptr, MrbTypeCache.register(\n{{ crystal_class }}\n, destructor))\n    \nend\n  \n"}},{"id":"call_and_return(mrb,proc,regular_args,converted_args,operator=&quot;&quot;)-macro","html_id":"call_and_return(mrb,proc,regular_args,converted_args,operator=&amp;quot;&amp;quot;)-macro","name":"call_and_return","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"regular_args","doc":null,"default_value":"","external_name":"regular_args","restriction":""},{"name":"converted_args","doc":null,"default_value":"","external_name":"converted_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""}],"args_string":"(mrb, proc, regular_args, converted_args, operator = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/MrbMacro.cr","line_number":436,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L436"},"def":{"name":"call_and_return","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"regular_args","doc":null,"default_value":"","external_name":"regular_args","restriction":""},{"name":"converted_args","doc":null,"default_value":"","external_name":"converted_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if proc.stringify == \"MrbWrap::Empty\" %}\n      return_value = {{ operator.id }}(*{{ converted_args }})\n    {% else %}\n      return_value = {{ proc }}{{ operator.id }}(*{{ converted_args }})\n    {% end %}\n\n    MrbCast.return_value(\n{{ mrb }}\n, return_value)\n  \n"}},{"id":"call_and_return_instance_method(mrb,proc,converted_obj,converted_args,operator=&quot;&quot;)-macro","html_id":"call_and_return_instance_method(mrb,proc,converted_obj,converted_args,operator=&amp;quot;&amp;quot;)-macro","name":"call_and_return_instance_method","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"converted_obj","doc":null,"default_value":"","external_name":"converted_obj","restriction":""},{"name":"converted_args","doc":null,"default_value":"","external_name":"converted_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""}],"args_string":"(mrb, proc, converted_obj, converted_args, operator = <span class=\"s\">&quot;&quot;</span>)","location":{"filename":"src/MrbMacro.cr","line_number":474,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L474"},"def":{"name":"call_and_return_instance_method","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"converted_obj","doc":null,"default_value":"","external_name":"converted_obj","restriction":""},{"name":"converted_args","doc":null,"default_value":"","external_name":"converted_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    if \n{{ converted_obj }}\n.is_a?(MrbWrap::StructWrapper)\n      working_content = \n{{ converted_obj }}\n.content\n\n      \n{% if proc.stringify == \"MrbWrap::Empty\" %}\n        return_value = working_content.{{ operator.id }}(*{{ converted_args }})\n      {% else %}\n        return_value = working_content.{{ proc }}{{ operator.id }}(*{{ converted_args }})\n      {% end %}\n\n\n      \n{{ converted_obj }}\n.content = working_content\n    \nelse\n      \n{% if proc.stringify == \"MrbWrap::Empty\" %}\n        return_value = {{ converted_obj }}.{{ operator.id }}(*{{ converted_args }})\n      {% else %}\n        return_value = {{ converted_obj }}.{{ proc }}{{ operator.id }}(*{{ converted_args }})\n      {% end %}\n\n    \nend\n    MrbCast.return_value(\n{{ mrb }}\n, return_value)\n  \n"}},{"id":"call_and_return_keyword_instance_method(mrb,proc,converted_obj,converted_regular_args,keyword_args,kw_args,operator=&quot;&quot;,empty_regular=false,context=nil,type_vars=nil,type_var_names=nil)-macro","html_id":"call_and_return_keyword_instance_method(mrb,proc,converted_obj,converted_regular_args,keyword_args,kw_args,operator=&amp;quot;&amp;quot;,empty_regular=false,context=nil,type_vars=nil,type_var_names=nil)-macro","name":"call_and_return_keyword_instance_method","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"converted_obj","doc":null,"default_value":"","external_name":"converted_obj","restriction":""},{"name":"converted_regular_args","doc":null,"default_value":"","external_name":"converted_regular_args","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"kw_args","doc":null,"default_value":"","external_name":"kw_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"empty_regular","doc":null,"default_value":"false","external_name":"empty_regular","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""},{"name":"type_vars","doc":null,"default_value":"nil","external_name":"type_vars","restriction":""},{"name":"type_var_names","doc":null,"default_value":"nil","external_name":"type_var_names","restriction":""}],"args_string":"(mrb, proc, converted_obj, converted_regular_args, keyword_args, kw_args, operator = <span class=\"s\">&quot;&quot;</span>, empty_regular = <span class=\"n\">false</span>, context = <span class=\"n\">nil</span>, type_vars = <span class=\"n\">nil</span>, type_var_names = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":495,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L495"},"def":{"name":"call_and_return_keyword_instance_method","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"converted_obj","doc":null,"default_value":"","external_name":"converted_obj","restriction":""},{"name":"converted_regular_args","doc":null,"default_value":"","external_name":"converted_regular_args","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"kw_args","doc":null,"default_value":"","external_name":"kw_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"empty_regular","doc":null,"default_value":"false","external_name":"empty_regular","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""},{"name":"type_vars","doc":null,"default_value":"nil","external_name":"type_vars","restriction":""},{"name":"type_var_names","doc":null,"default_value":"nil","external_name":"type_var_names","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    if \n{{ converted_obj }}\n.is_a?(MrbWrap::StructWrapper)\n      working_content = \n{{ converted_obj }}\n.content\n\n      \n{% if proc.stringify == \"MrbWrap::Empty\" %}\n        return_value = working_content.{{ operator.id }}(\n      {% else %}\n        return_value = working_content.{{ proc }}{{ operator.id }}(\n      {% end %}\n\n        \n{% if empty_regular %}\n          {% c = 0 %}\n          {% for keyword in keyword_args %}\n            {{ keyword.var.id }}: MrbMacro.convert_keyword_arg({{ mrb }}, {{ kw_args }}.values[{{ c }}], {{ keyword }}, context: {{ context }}, \n              type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }}, debug_information: {{ (proc.stringify + \" - \") + keyword_args.stringify }}),\n            {% c += 1 %}\n          {% end %}\n        {% else %}\n          *{{ converted_regular_args }},\n          {% c = 0 %}\n          {% for keyword in keyword_args %}\n            {{ keyword.var.id }}: MrbMacro.convert_keyword_arg({{ mrb }}, {{ kw_args }}.values[{{ c }}], {{ keyword }}, context: {{ context }},\n              type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }}, debug_information: {{ (proc.stringify + \" - \") + keyword_args.stringify }}),\n            {% c += 1 %}\n          {% end %}\n        {% end %}\n\n      )\n\n      \n{{ converted_obj }}\n.content = working_content\n    \nelse\n\n      \n{% if proc.stringify == \"MrbWrap::Empty\" %}\n        return_value = {{ converted_obj }}.{{ operator.id }}(\n      {% else %}\n        return_value = {{ converted_obj }}.{{ proc }}{{ operator.id }}(\n      {% end %}\n\n        \n{% if empty_regular %}\n          {% c = 0 %}\n          {% for keyword in keyword_args %}\n            {{ keyword.var.id }}: MrbMacro.convert_keyword_arg({{ mrb }}, {{ kw_args }}.values[{{ c }}], {{ keyword }}, context: {{ context }},\n              type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }}, debug_information: {{ (proc.stringify + \" - \") + keyword_args.stringify }}),\n            {% c += 1 %}\n          {% end %}\n        {% else %}\n          *{{ converted_regular_args }},\n          {% c = 0 %}\n          {% for keyword in keyword_args %}\n            {{ keyword.var.id }}: MrbMacro.convert_keyword_arg({{ mrb }}, {{ kw_args }}.values[{{ c }}], {{ keyword }}, context: {{ context }},\n              type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }}, debug_information: {{ (proc.stringify + \" - \") + keyword_args.stringify }}),\n            {% c += 1 %}\n          {% end %}\n        {% end %}\n\n      )\n\n    \nend\n\n    MrbCast.return_value(\n{{ mrb }}\n, return_value)\n  \n"}},{"id":"call_and_return_keyword_method(mrb,proc,converted_regular_args,keyword_args,kw_args,operator=&quot;&quot;,empty_regular=false,context=nil,type_vars=nil,type_var_names=nil)-macro","html_id":"call_and_return_keyword_method(mrb,proc,converted_regular_args,keyword_args,kw_args,operator=&amp;quot;&amp;quot;,empty_regular=false,context=nil,type_vars=nil,type_var_names=nil)-macro","name":"call_and_return_keyword_method","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"converted_regular_args","doc":null,"default_value":"","external_name":"converted_regular_args","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"kw_args","doc":null,"default_value":"","external_name":"kw_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"empty_regular","doc":null,"default_value":"false","external_name":"empty_regular","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""},{"name":"type_vars","doc":null,"default_value":"nil","external_name":"type_vars","restriction":""},{"name":"type_var_names","doc":null,"default_value":"nil","external_name":"type_var_names","restriction":""}],"args_string":"(mrb, proc, converted_regular_args, keyword_args, kw_args, operator = <span class=\"s\">&quot;&quot;</span>, empty_regular = <span class=\"n\">false</span>, context = <span class=\"n\">nil</span>, type_vars = <span class=\"n\">nil</span>, type_var_names = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":445,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L445"},"def":{"name":"call_and_return_keyword_method","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"converted_regular_args","doc":null,"default_value":"","external_name":"converted_regular_args","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"kw_args","doc":null,"default_value":"","external_name":"kw_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"empty_regular","doc":null,"default_value":"false","external_name":"empty_regular","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""},{"name":"type_vars","doc":null,"default_value":"nil","external_name":"type_vars","restriction":""},{"name":"type_var_names","doc":null,"default_value":"nil","external_name":"type_var_names","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if proc.stringify == \"MrbWrap::Empty\" %}\n      return_value = {{ operator.id }}(\n    {% else %}\n      return_value = {{ proc }}{{ operator.id }}(\n    {% end %}\n\n      \n{% if empty_regular %}\n        {% c = 0 %}\n        {% for keyword in keyword_args %}\n          {{ keyword.var.id }}: MrbMacro.convert_keyword_arg({{ mrb }}, {{ kw_args }}.values[{{ c }}], {{ keyword }}, context: {{ context }}, \n            type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }}, debug_information: {{ (proc.stringify + \" - \") + keyword_args.stringify }}),\n          {% c += 1 %}\n        {% end %}\n      {% else %}\n        *{{ converted_regular_args }},\n        {% c = 0 %}\n        {% for keyword in keyword_args %}\n          {{ keyword.var.id }}: MrbMacro.convert_keyword_arg({{ mrb }}, {{ kw_args }}.values[{{ c }}], {{ keyword }}, context: {{ context }}}, \n            type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }}, debug_information: {{ (proc.stringify + \" - \") + keyword_args.stringify }}),\n          {% c += 1 %}\n        {% end %}\n      {% end %}\n\n    )\n\n    MrbCast.return_value(\n{{ mrb }}\n, return_value)\n  \n"}},{"id":"cast_to_union_value(mrb,value,types,context=nil)-macro","html_id":"cast_to_union_value(mrb,value,types,context=nil)-macro","name":"cast_to_union_value","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"types","doc":null,"default_value":"","external_name":"types","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb, value, types, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":332,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L332"},"def":{"name":"cast_to_union_value","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"types","doc":null,"default_value":"","external_name":"types","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    final_value = :invalid\n\n    \n{% for type in types %}\n      {% if type.resolve? %}\n        MrbMacro.check_and_cast_union_type({{ mrb }}, {{ value }}, {{ type }}, {{ type }}, context: {{ context }})\n      {% else %}{% if context %}\n        MrbMacro.check_and_cast_union_type({{ mrb }}, {{ value }}, {{ context }}::{{ type.stringify.starts_with?(\"::\") ? type.stringify[2..-1].id : type }}, {{ type }}, context: {{ context }})\n      {% else %}\n        {% raise(\"Could not resolve type #{type}, which is a #{type.class_name}, in context #{context}\") %}\n      {% end %}{% end %}\n    {% end %}\n\n    \n    if final_value.is_a?(Symbol)\n      MrbInternal.mrb_raise_argument_error(\n{{ mrb }}\n, \"Could not determine any value for #{\n{{ value }}\n} with types \n{{ types }}\n in context \n{{ context }}\n\")\n      raise(\"Should not be reached\")\n    \nelse\n      final_value\n    \nend\n  \n"}},{"id":"check_and_cast_resolved_union_type(mrb,value,type,raw_type,context=nil)-macro","html_id":"check_and_cast_resolved_union_type(mrb,value,type,raw_type,context=nil)-macro","name":"check_and_cast_resolved_union_type","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"raw_type","doc":null,"default_value":"","external_name":"raw_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb, value, type, raw_type, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":370,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L370"},"def":{"name":"check_and_cast_resolved_union_type","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"raw_type","doc":null,"default_value":"","external_name":"raw_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if type.resolve <= Nil %}\n      if MrbCast.check_for_nil({{ value }})\n        final_value = MrbCast.cast_to_nil({{ mrb }}, {{ value }})\n      end\n    {% else %}{% if type.resolve <= Bool %}\n      if MrbCast.check_for_bool({{ value }})\n        final_value = MrbCast.cast_to_bool({{ mrb }}, {{ value }})\n      end\n    {% else %}{% if type.resolve == Number %}\n      if MrbCast.check_for_float({{ value }})\n        final_value = Float64.new(MrbCast.cast_to_float({{ mrb }}, {{ value }}))\n      end\n    {% else %}{% if type.resolve == Int %}\n      if MrbCast.check_for_fixnum({{ value }})\n        final_value = Int64.new(MrbCast.cast_to_int({{ mrb }}, {{ value }}))\n      end\n    {% else %}{% if type.resolve <= Int %}\n      if MrbCast.check_for_fixnum({{ value }})\n        final_value = {{ type }}.new(MrbCast.cast_to_int({{ mrb }}, {{ value }}))\n      end\n    {% else %}{% if type.resolve == Float %}\n      if MrbCast.check_for_float({{ value }})\n        final_value = Float64.new(MrbCast.cast_to_float({{ mrb }}, {{ value }}))\n      end\n    {% else %}{% if type.resolve <= Float %}\n      if MrbCast.check_for_float({{ value }})\n        final_value = {{ type }}.new(MrbCast.cast_to_float({{ mrb }}, {{ value }}))\n      end\n    {% else %}{% if type.resolve <= String %}\n      if MrbCast.check_for_string({{ value }})\n        final_value = MrbCast.cast_to_string({{ mrb }}, {{ value }})\n      end\n    {% else %}{% if type.resolve <= Struct %}\n      if MrbCast.check_for_data({{ value }}) && MrbCast.check_custom_type({{ mrb }}, {{ value }}, {{ type }})\n        final_value = MrbMacro.convert_from_ruby_struct({{ mrb }}, {{ value }}, {{ type }}).value.content\n      end\n    {% else %}{% if type.resolve? %}\n      if MrbCast.check_for_data({{ value }}) && MrbCast.check_custom_type({{ mrb }}, {{ value }}, {{ type }})\n        final_value = MrbMacro.convert_from_ruby_object({{ mrb }}, {{ value }}, {{ type }}).value\n      end\n    {% else %}\n      {% raise(\"Could not resolve type #{type}, which is a #{type.class_name}\") %}\n    {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n\n  \n"}},{"id":"check_and_cast_union_type(mrb,value,type,raw_type,context=nil)-macro","html_id":"check_and_cast_union_type(mrb,value,type,raw_type,context=nil)-macro","name":"check_and_cast_union_type","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"raw_type","doc":null,"default_value":"","external_name":"raw_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb, value, type, raw_type, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":353,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L353"},"def":{"name":"check_and_cast_union_type","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"raw_type","doc":null,"default_value":"","external_name":"raw_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if type.resolve? %}\n      MrbMacro.check_and_cast_resolved_union_type({{ mrb }}, {{ value }}, {{ type }}, {{ type }})\n    {% else %}{% if context %}\n      {% if context.names[0..-2].size > 0 %}\n        {% new_context = ((context.names[0..-2].join(\"::\")).gsub(/(\\:\\:)+/, \"::\")).id %}\n        MrbMacro.check_and_cast_resolved_union_type({{ mrb }}, {{ value }}, {{ new_context }}::{{ raw_type.stringify.starts_with?(\"::\") ? raw_type[2..-1] : raw_type }}, {{ raw_type }}, {{ new_context }})\n      {% else %}\n        MrbMacro.check_and_cast_resolved_union_type({{ mrb }}, {{ value }}, {{ raw_type }}, {{ raw_type }})\n      {% end %}\n    {% else %}\n      {% raise(\"Could not resolve type #{type}, which is a #{type.class_name}\") %}\n    {% end %}{% end %}\n\n  \n"}},{"id":"convert_arg(mrb,arg,arg_type,context=nil)-macro","html_id":"convert_arg(mrb,arg,arg_type,context=nil)-macro","name":"convert_arg","doc":"Converts Ruby values to Crystal values","summary":"<p>Converts Ruby values to Crystal values</p>","abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"arg_type","doc":null,"default_value":"","external_name":"arg_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb, arg, arg_type, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":167,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L167"},"def":{"name":"convert_arg","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"arg_type","doc":null,"default_value":"","external_name":"arg_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if (arg_type.stringify.includes?(\"->\")) || (arg_type.stringify.includes?(\" Proc(\")) %}\n      {% puts(\"\\e[33m> INFO: Proc types are not allowed as arguments.\\e[0m\") %}\n      raise \"Proc types are not allowed as arguments ({{ debug_information.id }})\"\n    {% else %}{% if arg_type.is_a?(Generic) && ((arg_type.name.stringify.gsub(/(\\:\\:)+/, \"\")) == \"Pointer\") %}\n      {% puts(\"\\e[33m> INFO: Pointer types are not allowed as arguments.\\e[0m\") %}\n      raise \"Pointer types are not allowed as arguments ({{ debug_information.id }})\"\n    {% else %}{% if arg_type.stringify.includes?('|') %}\n      # This is kind of cheating, but hey, it does its job\n      # ...\n      # Please don't judge me\n      MrbMacro.convert_keyword_arg({{ mrb }}, {{ arg }}, {{ arg_type }}, context: {{ context }})\n    {% else %}{% if arg_type.is_a?(TypeDeclaration) %}\n      MrbMacro.convert_arg({{ mrb }}, {{ arg }}, {{ arg_type.type }}, context: {{ context }})\n    {% else %}{% if context %}\n      MrbMacro.convert_resolved_arg({{ mrb }}, {{ arg }}, {{ context }}::{{ arg_type.stringify.starts_with?(\"::\") ? arg_type.stringify[2..-1].id : arg_type }}, {{ arg_type }}, {{ context }})\n    {% else %}\n      MrbMacro.convert_resolved_arg({{ mrb }}, {{ arg }}, {{ arg_type }}, {{ arg_type }})\n    {% end %}{% end %}{% end %}{% end %}{% end %}\n\n  \n"}},{"id":"convert_args(mrb,args,regular_args,context)-macro","html_id":"convert_args(mrb,args,regular_args,context)-macro","name":"convert_args","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"regular_args","doc":null,"default_value":"","external_name":"regular_args","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(mrb, args, regular_args, context)","location":{"filename":"src/MrbMacro.cr","line_number":555,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L555"},"def":{"name":"convert_args","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"regular_args","doc":null,"default_value":"","external_name":"regular_args","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    Tuple.new(\n      \n{% c = 0 %}\n\n      \n{% if regular_args %}\n        {% for arg in regular_args %}\n          MrbMacro.convert_arg({{ mrb }}, {{ args }}[{{ c }}].value, {{ arg }}, context: {{ context }}),\n          {% c += 1 %}\n        {% end %}\n      {% end %}\n\n    )\n  \n"}},{"id":"convert_from_ruby_object(mrb,obj,crystal_type)-macro","html_id":"convert_from_ruby_object(mrb,obj,crystal_type)-macro","name":"convert_from_ruby_object","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":""},{"name":"crystal_type","doc":null,"default_value":"","external_name":"crystal_type","restriction":""}],"args_string":"(mrb, obj, crystal_type)","location":{"filename":"src/MrbMacro.cr","line_number":416,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L416"},"def":{"name":"convert_from_ruby_object","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":""},{"name":"crystal_type","doc":null,"default_value":"","external_name":"crystal_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    if !MrbCast.check_custom_type(\n{{ mrb }}\n, \n{{ obj }}\n, \n{{ crystal_type }}\n)\n      obj_class = MrbInternal.get_class_of_obj(\n{{ mrb }}\n, \n{{ obj }}\n)\n      MrbInternal.mrb_raise_argument_error(\n{{ mrb }}\n, \"Invalid data type #{obj_class} for object #{\n{{ obj }}\n}:\\n Should be #{\n{{ crystal_type }}\n} -> MrbClassCache.get(\n{{ crystal_type }}\n) instead.\")\n    \nend\n\n    ptr = MrbInternal.get_data_ptr(\n{{ obj }}\n)\n    ptr.as(\n{{ crystal_type }}\n*)\n  \n"}},{"id":"convert_from_ruby_struct(mrb,obj,crystal_type)-macro","html_id":"convert_from_ruby_struct(mrb,obj,crystal_type)-macro","name":"convert_from_ruby_struct","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":""},{"name":"crystal_type","doc":null,"default_value":"","external_name":"crystal_type","restriction":""}],"args_string":"(mrb, obj, crystal_type)","location":{"filename":"src/MrbMacro.cr","line_number":426,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L426"},"def":{"name":"convert_from_ruby_struct","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":""},{"name":"crystal_type","doc":null,"default_value":"","external_name":"crystal_type","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    if !MrbCast.check_custom_type(\n{{ mrb }}\n, \n{{ obj }}\n, \n{{ crystal_type }}\n)\n      obj_class = MrbInternal.get_class_of_obj(\n{{ mrb }}\n, \n{{ obj }}\n)\n      MrbInternal.mrb_raise_argument_error(\n{{ mrb }}\n, \"Invalid data type #{obj_class} for object #{\n{{ obj }}\n}:\\n Should be #{\n{{ crystal_type }}\n} -> MrbClassCache.get(\n{{ crystal_type }}\n) instead.\")\n    \nend\n    \n    ptr = MrbInternal.get_data_ptr(\n{{ obj }}\n)\n    ptr.as(MrbWrap::StructWrapper(\n{{ crystal_type }}\n)*)\n  \n"}},{"id":"convert_keyword_arg(mrb,arg,arg_type,context=nil,type_vars=nil,type_var_names=nil,debug_information=nil)-macro","html_id":"convert_keyword_arg(mrb,arg,arg_type,context=nil,type_vars=nil,type_var_names=nil,debug_information=nil)-macro","name":"convert_keyword_arg","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"arg_type","doc":null,"default_value":"","external_name":"arg_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""},{"name":"type_vars","doc":null,"default_value":"nil","external_name":"type_vars","restriction":""},{"name":"type_var_names","doc":null,"default_value":"nil","external_name":"type_var_names","restriction":""},{"name":"debug_information","doc":null,"default_value":"nil","external_name":"debug_information","restriction":""}],"args_string":"(mrb, arg, arg_type, context = <span class=\"n\">nil</span>, type_vars = <span class=\"n\">nil</span>, type_var_names = <span class=\"n\">nil</span>, debug_information = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":221,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L221"},"def":{"name":"convert_keyword_arg","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"arg_type","doc":null,"default_value":"","external_name":"arg_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""},{"name":"type_vars","doc":null,"default_value":"nil","external_name":"type_vars","restriction":""},{"name":"type_var_names","doc":null,"default_value":"nil","external_name":"type_var_names","restriction":""},{"name":"debug_information","doc":null,"default_value":"nil","external_name":"debug_information","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n# TODO: Is it possible to put the message somewhere else... or at least CATCH the exception?\n\n    \n{% if (arg_type.stringify.includes?(\"->\")) || (arg_type.stringify.includes?(\" Proc(\")) %}\n      {% puts(\"\\e[33m> INFO: Proc types are not allowed as arguments (#{debug_information.id}).\\e[0m\") %}\n      raise \"Proc types are not allowed as arguments ({{ debug_information.id }})\"\n    {% else %}{% if arg_type.is_a?(Generic) && ((arg_type.name.stringify.gsub(/(\\:\\:)+/, \"\")) == \"Pointer\") %}\n      {% puts(\"\\e[33m> INFO: Pointer types are not allowed as arguments (#{debug_information.id}).\\e[0m\") %}\n      raise \"Pointer types are not allowed as arguments ({{ debug_information.id }})\"\n    {% else %}{% if type_var_names && (type_var_names.includes?(arg_type.type)) %}\n      {% type_var_names.each_with_index do |element, index|\n  if element == arg_type.type\n    result = index\n  end\nend %}\n      MrbMacro.convert_keyword_arg({{ mrb }}, {{ arg }}, {{ type_vars[result] }}, context: {{ context }}, debug_information: {{ debug_information }})\n    {% else %}{% if type_var_names %}\n      {% magical_regex = /([\\(\\s\\:])([A-Z]+)([\\),\\s])/ %}\n      {% replacement_arg_type = arg_type.type.stringify.gsub(magical_regex, \"\\\\1#\\\\2#\\\\3\") %}\n\n      {% for type_var_name, index in type_var_names %}\n        {% split_types = replacement_arg_type.split(\"#\") %}\n        {% odd = true %}\n        {% final_split_types = [] of ASTNode %}\n        {% for split_type, split_type_index in split_types %}\n          {% if !odd %}\n            {% result = nil %}\n            {% type_var_names.each_with_index do |element, index|\n  if element.stringify == split_type\n    result = index\n  end\nend %}\n            {% if result %}\n              {% final_split_types.push(type_vars[result].stringify) %}\n            {% else %}\n              {% final_split_types.push(split_type) %}\n            {% end %}\n          {% else %}\n            {% final_split_types.push(split_type) %}\n          {% end %}\n          {% odd = !odd %}\n        {% end %}\n      {% end %}\n\n      {% if arg_type.value %}\n       {% final_type_def = \"#{arg_type.var} : #{(final_split_types.join(\"\")).id} = #{arg_type.value}\" %}\n      {% else %}\n        {% final_type_def = \"#{arg_type.var} : #{(final_split_types.join(\"\")).id}\" %}\n      {% end %}\n\n      MrbMacro.convert_keyword_arg({{ mrb }}, {{ arg }}, {{ final_type_def.id }}, context: {{ context }}, debug_information: {{ debug_information }})\n    {% else %}{% if arg_type.is_a?(Call) %}\n      {% raise(\"Received Call #{arg_type} instead of TypeDeclaration or TypeNode\") %}\n    {% else %}{% if arg_type.is_a?(TypeDeclaration) %}\n      if MrbCast.is_undef?({{ arg }})\n        {% if (arg_type.value || (arg_type.value == false)) || (arg_type.value == nil) %}\n          {{ arg_type.value }}\n        {% else %}\n          # Should only happen if no default value was given\n          MrbInternal.mrb_raise_argument_error({{ mrb }}, \"Undefined argument #{{{ arg }}} of {{ arg_type }} in context {{ context }}\")\n          # Code should jump to somewhere else before this point, but we want to have a NoReturn type here\n          raise(\"Should not be reached\")\n        {% end %}\n      else\n        # Yes, this is not the elegant way\n        # However, when a union type component moves out of its context, it is not resolvable by its own anymore\n        # This then leads to problems, so it is better to test for '|' instead of using the resolve.union? method\n        {% if arg_type.type.stringify.includes?('|') %}\n          MrbMacro.convert_keyword_arg({{ mrb }}, {{ arg }}, Union({{ arg_type.type }}), context: {{ context }}, debug_information: {{ debug_information }})\n        {% else %}\n          MrbMacro.convert_keyword_arg({{ mrb }}, {{ arg }}, {{ arg_type.type }}, context: {{ context }}, debug_information: {{ debug_information }})\n        {% end %}\n      end\n    {% else %}{% if context && (!(arg_type.stringify.starts_with?(\"Union\"))) %}\n      MrbMacro.convert_resolved_keyword_arg({{ mrb }}, {{ arg }}, {{ context }}::{{ arg_type.stringify.starts_with?(\"::\") ? arg_type.stringify[2..-1].id : arg_type }}, {{ arg_type }}, context: {{ context }}, debug_information: {{ debug_information }})\n    {% else %}\n      MrbMacro.convert_resolved_keyword_arg({{ mrb }}, {{ arg }}, {{ arg_type }}, {{ arg_type }}, context: {{ context }}, debug_information: {{ debug_information }})\n    {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n\n  \n"}},{"id":"convert_resolved_arg(mrb,arg,arg_type,raw_arg_type,context=nil)-macro","html_id":"convert_resolved_arg(mrb,arg,arg_type,raw_arg_type,context=nil)-macro","name":"convert_resolved_arg","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"arg_type","doc":null,"default_value":"","external_name":"arg_type","restriction":""},{"name":"raw_arg_type","doc":null,"default_value":"","external_name":"raw_arg_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb, arg, arg_type, raw_arg_type, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":188,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L188"},"def":{"name":"convert_resolved_arg","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"arg_type","doc":null,"default_value":"","external_name":"arg_type","restriction":""},{"name":"raw_arg_type","doc":null,"default_value":"","external_name":"raw_arg_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if arg_type.resolve? %}\n      {% if arg_type.resolve <= Bool %}\n        ({{ arg }} != 0)\n      {% else %}{% if arg_type.resolve == Number %}\n        Float64.new({{ arg }})\n      {% else %}{% if arg_type.resolve == Int %}\n        Int64.new({{ arg }})\n      {% else %}{% if arg_type.resolve <= Int %}\n        {{ arg_type }}.new({{ arg }})\n      {% else %}{% if arg_type.resolve == Float %}\n        Float64.new({{ arg }})\n      {% else %}{% if arg_type.resolve <= Float %}\n        {{ arg_type }}.new({{ arg }})\n      {% else %}{% if arg_type.resolve <= String %}\n        {{ arg_type }}.new({{ arg }})\n      {% else %}{% if arg_type.resolve <= Struct %}\n        MrbMacro.convert_from_ruby_struct({{ mrb }}, {{ arg }}, {{ arg_type }}).value.content\n      {% else %}\n        MrbMacro.convert_from_ruby_object({{ mrb }}, {{ arg }}, {{ arg_type }}).value\n      {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n    {% else %}{% if context %}\n      {% if context.names[0..-2].size > 0 %}\n        {% new_context = ((context.names[0..-2].join(\"::\")).gsub(/(\\:\\:)+/, \"::\")).id %}\n        MrbMacro.convert_resolved_arg({{ mrb }}, {{ arg }}, {{ new_context }}::{{ raw_arg_type.stringify.starts_with?(\"::\") ? raw_arg_type.stringify[2..-1].id : raw_arg_type }}, {{ raw_arg_type }}, {{ new_context }})\n      {% else %}\n        MrbMacro.convert_resolved_arg({{ mrb }}, {{ arg }}, {{ raw_arg_type }}, {{ raw_arg_type }})\n      {% end %}\n    {% else %}\n      {% raise(\"Could not resolve #{arg_type}, which is a #{arg_type.class_name}, in any meaningful way\") %}\n    {% end %}{% end %}\n\n  \n"}},{"id":"convert_resolved_keyword_arg(mrb,arg,arg_type,raw_arg_type,context=nil,debug_information=nil)-macro","html_id":"convert_resolved_keyword_arg(mrb,arg,arg_type,raw_arg_type,context=nil,debug_information=nil)-macro","name":"convert_resolved_keyword_arg","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"arg_type","doc":null,"default_value":"","external_name":"arg_type","restriction":""},{"name":"raw_arg_type","doc":null,"default_value":"","external_name":"raw_arg_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""},{"name":"debug_information","doc":null,"default_value":"nil","external_name":"debug_information","restriction":""}],"args_string":"(mrb, arg, arg_type, raw_arg_type, context = <span class=\"n\">nil</span>, debug_information = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":292,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L292"},"def":{"name":"convert_resolved_keyword_arg","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"arg_type","doc":null,"default_value":"","external_name":"arg_type","restriction":""},{"name":"raw_arg_type","doc":null,"default_value":"","external_name":"raw_arg_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""},{"name":"debug_information","doc":null,"default_value":"nil","external_name":"debug_information","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if arg_type.stringify.includes?('|') %}\n      # Same as above, this sadly needs some uncanny magic\n      MrbMacro.cast_to_union_value({{ mrb }}, {{ arg }}, {{ (arg_type.stringify[6..-2].split('|')).map do |x|\n  x.id\nend }}, context: {{ context }})\n    {% else %}{% if arg_type.resolve? %}\n      {% if arg_type.resolve <= Nil %}\n        MrbCast.cast_to_nil({{ mrb }}, {{ arg }})\n      {% else %}{% if arg_type.resolve <= Bool %}\n        MrbCast.cast_to_bool({{ mrb }}, {{ arg }})\n      {% else %}{% if arg_type.resolve == Number %}\n        Float64.new(MrbCast.cast_to_float({{ mrb }}, {{ arg }}))\n      {% else %}{% if arg_type.resolve == Int %}\n        Int64.new(MrbCast.cast_to_int({{ mrb }}, {{ arg }}))\n      {% else %}{% if arg_type.resolve <= Int %}\n        {{ arg_type }}.new(MrbCast.cast_to_int({{ mrb }}, {{ arg }}))\n      {% else %}{% if arg_type.resolve == Float %}\n        Float64.new(MrbCast.cast_to_float({{ mrb }}, {{ arg }}))\n      {% else %}{% if arg_type.resolve <= Float %}\n        {{ arg_type }}.new(MrbCast.cast_to_float({{ mrb }}, {{ arg }}))\n      {% else %}{% if arg_type.resolve <= String %}\n        MrbCast.cast_to_string({{ mrb }}, {{ arg }})\n      {% else %}{% if arg_type.resolve <= Struct %}\n        MrbMacro.convert_from_ruby_struct({{ mrb }}, {{ arg }}, {{ arg_type }}).value.content\n      {% else %}{% if arg_type.resolve? %}\n        MrbMacro.convert_from_ruby_object({{ mrb }}, {{ arg }}, {{ arg_type }}).value\n      {% else %}\n        {% raise(\"Could not resolve type #{arg_type}, which is a #{arg_type.class_name.id} (#{debug_information.id})\") %}\n      {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n    {% else %}{% if context %}\n      {% if context.names[0..-2].size > 0 %}\n        {% new_context = ((context.names[0..-2].join(\"::\")).gsub(/(\\:\\:)+/, \"::\")).id %}\n        MrbMacro.convert_resolved_keyword_arg({{ mrb }}, {{ arg }}, {{ new_context }}::{{ raw_arg_type.stringify.starts_with?(\"::\") ? raw_arg_type.stringify[2..-1].id : raw_arg_type }}, {{ raw_arg_type }}, {{ new_context }}, debug_information: {{ debug_information }})\n      {% else %}\n        MrbMacro.convert_resolved_keyword_arg({{ mrb }}, {{ arg }}, {{ raw_arg_type }}, {{ raw_arg_type }}, debug_information: {{ debug_information }})\n      {% end %}\n    {% else %}\n      {% raise(\"Could not resolve type #{arg_type}, which is a #{arg_type.class_name.id} (#{debug_information.id})\") %}\n    {% end %}{% end %}{% end %}\n\n  \n"}},{"id":"format_char(arg,optional_values=false,context=nil)-macro","html_id":"format_char(arg,optional_values=false,context=nil)-macro","name":"format_char","doc":null,"summary":null,"abstract":false,"args":[{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"optional_values","doc":null,"default_value":"false","external_name":"optional_values","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(arg, optional_values = <span class=\"n\">false</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":13,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L13"},"def":{"name":"format_char","args":[{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"optional_values","doc":null,"default_value":"false","external_name":"optional_values","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if arg.stringify.includes?('|') %}\n      {% if (optional_values != true) && (arg.stringify.includes?('|')) %}\n        \"|o\"\n      {% else %}\n        \"o\"\n      {% end %}\n    {% else %}{% if arg.is_a?(TypeDeclaration) %}\n      {% if (optional_values != true) && arg.value %}\n        \"|\" + MrbMacro.format_char({{ arg.type }}, optional_values: true, context: {{ context }})\n      {% else %}\n        MrbMacro.format_char({{ arg.type }}, optional_values: {{ optional_values }}, context: {{ context }})\n      {% end %}\n    {% else %}{% if context %}\n      MrbMacro.resolve_format_char({{ context }}::{{ arg.stringify.starts_with?(\"::\") ? arg.stringify[2..-1].id : arg }}, {{ arg }}, {{ context }})\n    {% else %}\n      MrbMacro.resolve_format_char({{ arg }}, {{ arg }})\n    {% end %}{% end %}{% end %}\n\n  \n"}},{"id":"format_string(args,context=nil)-macro","html_id":"format_string(args,context=nil)-macro","name":"format_string","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(args, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":3,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L3"},"def":{"name":"format_string","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \"\" +\n    \n{% if args %}\n      {% for arg in args %}\n        MrbMacro.format_char({{ arg }}, context: {{ context }}) +\n      {% end %}\n    {% end %}\n\n    \"\"\n  \n"}},{"id":"generate_arg_tuple(mrb,args,context=nil)-macro","html_id":"generate_arg_tuple(mrb,args,context=nil)-macro","name":"generate_arg_tuple","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb, args, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":133,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L133"},"def":{"name":"generate_arg_tuple","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    Tuple.new(\n      \n{% if args %}\n        {% for arg in args %}\n          {% if arg.is_a?(TypeDeclaration) %}\n            {% if arg.value %}\n              {% if arg.type.stringify.includes?('|') %}\n                # This does work, but I'm a bit surprised\n                MrbMacro.pointer_type({{ arg }}, context: {{ context }}).malloc(size: 1, value: MrbCast.return_value({{ mrb }}, {{ arg.value }})),\n              {% else %}{% if arg.type.resolve <= String %}\n                # The outer gods bless my wretched soul that this does neither segfault nor leak\n                MrbMacro.pointer_type({{ arg }}, context: {{ context }}).malloc(size: 1, value: {{ arg.value }}.to_unsafe),\n              {% else %}\n                MrbMacro.pointer_type({{ arg }}, context: {{ context }}).malloc(size: 1, value: MrbMacro.type_in_ruby({{ arg }}, context: {{ context }}).new({{ arg.value }})),\n              {% end %}{% end %}\n            {% else %}\n              MrbMacro.pointer_type({{ arg }}, context: {{ context }}).malloc(size: 1),\n            {% end %}\n          {% else %}\n            MrbMacro.pointer_type({{ arg }}, context: {{ context }}).malloc(size: 1),\n          {% end %}\n        {% end %}\n      {% end %}\n\n    )\n  \n"}},{"id":"generate_keyword_argument_struct(mrb_state,keyword_args)-macro","html_id":"generate_keyword_argument_struct(mrb_state,keyword_args)-macro","name":"generate_keyword_argument_struct","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""}],"args_string":"(mrb_state, keyword_args)","location":{"filename":"src/MrbMacro.cr","line_number":603,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L603"},"def":{"name":"generate_keyword_argument_struct","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    kw_names = MrbMacro.generate_keyword_names(\n{{ mrb_state }}\n, \n{{ keyword_args }}\n)\n    kw_args = MrbInternal::KWArgs.new\n    kw_args.num = \n{{ keyword_args.size }}\n\n    kw_args.values = Pointer(MrbInternal::MrbValue).malloc(size: \n{{ keyword_args.size }}\n)\n    kw_args.table = kw_names\n    kw_args.required = \n{{ keyword_args.select do |i|\n  !i.var\nend.size }}\n\n    kw_args.rest = Pointer(MrbInternal::MrbValue).malloc(size: 1)\n    kw_args\n  \n"}},{"id":"generate_keyword_names(mrb_state,keyword_args)-macro","html_id":"generate_keyword_names(mrb_state,keyword_args)-macro","name":"generate_keyword_names","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""}],"args_string":"(mrb_state, keyword_args)","location":{"filename":"src/MrbMacro.cr","line_number":614,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L614"},"def":{"name":"generate_keyword_names","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    [\n      \n{% for keyword in keyword_args %}\n        MrbInternal.convert_to_mrb_sym({{ mrb_state }}, {{ keyword.var.stringify }}),\n      {% end %}\n\n    ]\n  \n"}},{"id":"get_converted_args(mrb,regular_args,context)-macro","html_id":"get_converted_args(mrb,regular_args,context)-macro","name":"get_converted_args","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"regular_args","doc":null,"default_value":"","external_name":"regular_args","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(mrb, regular_args, context)","location":{"filename":"src/MrbMacro.cr","line_number":567,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L567"},"def":{"name":"get_converted_args","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"regular_args","doc":null,"default_value":"","external_name":"regular_args","restriction":""},{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    args = MrbMacro.generate_arg_tuple(\n{{ mrb }}\n, \n{{ regular_args }}\n, context: \n{{ context }}\n)\n    format_string = MrbMacro.format_string(\n{{ regular_args }}\n, context: \n{{ context }}\n)\n    \n    MrbInternal.mrb_get_args(\n{{ mrb }}\n, format_string, *args)\n\n    MrbMacro.convert_args(\n{{ mrb }}\n, args, \n{{ regular_args }}\n, context: \n{{ context }}\n)\n  \n"}},{"id":"get_raw_args(mrb,regular_args,context=nil)-macro","html_id":"get_raw_args(mrb,regular_args,context=nil)-macro","name":"get_raw_args","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"regular_args","doc":null,"default_value":"","external_name":"regular_args","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb, regular_args, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":159,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L159"},"def":{"name":"get_raw_args","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":""},{"name":"regular_args","doc":null,"default_value":"","external_name":"regular_args","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    args = MrbMacro.generate_arg_tuple(\n{{ mrb }}\n, \n{{ regular_args }}\n, context: \n{{ context }}\n)\n    format_string = MrbMacro.format_string(\n{{ regular_args }}\n, context: \n{{ context }}\n)\n    MrbInternal.mrb_get_args(\n{{ mrb }}\n, format_string, *args)\n    args\n  \n"}},{"id":"pointer_type(type,context=nil)-macro","html_id":"pointer_type(type,context=nil)-macro","name":"pointer_type","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(type, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":96,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L96"},"def":{"name":"pointer_type","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if type.stringify.includes?('|') %}\n      Pointer(MrbInternal::MrbValue)\n    {% else %}{% if type.is_a?(TypeDeclaration) %}\n      MrbMacro.pointer_type({{ type.type }}, context: {{ context }})\n    {% else %}{% if context %}\n      MrbMacro.resolve_pointer_type({{ context }}::{{ type.stringify.starts_with?(\"::\") ? type.stringify[2..-1].id : type }}, {{ type }}, {{ context }})\n    {% else %}\n      MrbMacro.resolve_pointer_type({{ type }}, {{ type }})\n    {% end %}{% end %}{% end %}\n\n  \n"}},{"id":"resolve_format_char(arg,raw_arg,context=nil)-macro","html_id":"resolve_format_char(arg,raw_arg,context=nil)-macro","name":"resolve_format_char","doc":null,"summary":null,"abstract":false,"args":[{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"raw_arg","doc":null,"default_value":"","external_name":"raw_arg","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(arg, raw_arg, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":33,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L33"},"def":{"name":"resolve_format_char","args":[{"name":"arg","doc":null,"default_value":"","external_name":"arg","restriction":""},{"name":"raw_arg","doc":null,"default_value":"","external_name":"raw_arg","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if arg.resolve? %}\n      {% if arg.resolve <= Bool %}\n        \"b\"\n      {% else %}{% if arg.resolve <= Int %}\n        \"i\"\n      {% else %}{% if arg.resolve <= Float %}\n        \"f\"\n      {% else %}{% if arg.resolve <= String %}\n        \"z\"\n      {% else %}\n        \"o\"\n      {% end %}{% end %}{% end %}{% end %}\n    {% else %}{% if context %}\n      {% if context.names[0..-2].size > 0 %}\n        {% new_context = ((context.names[0..-2].join(\"::\")).gsub(/(::)+/, \"::\")).id %}\n        MrbMacro.resolve_format_char({{ new_context }}::{{ raw_arg.stringify.starts_with?(\"::\") ? raw_arg.stringify[2..-1].id : raw_arg }}, {{ raw_arg }}, {{ new_context }})\n      {% else %}\n        MrbMacro.resolve_format_char({{ raw_arg }}, {{ raw_arg }})\n      {% end %}\n    {% else %}\n      {% raise(\"Could not resolve #{arg}, which is a #{arg.class_name}, in any meaningful way\") %}\n    {% end %}{% end %}\n\n  \n"}},{"id":"resolve_pointer_type(type,raw_type,context=nil)-macro","html_id":"resolve_pointer_type(type,raw_type,context=nil)-macro","name":"resolve_pointer_type","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"raw_type","doc":null,"default_value":"","external_name":"raw_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(type, raw_type, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":108,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L108"},"def":{"name":"resolve_pointer_type","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"raw_type","doc":null,"default_value":"","external_name":"raw_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if type.resolve? %}\n      {% if type.resolve <= Bool %}\n        Pointer(MrbInternal::MrbBool)\n      {% else %}{% if type.resolve <= Int %}\n        Pointer(MrbInternal::MrbInt)\n      {% else %}{% if type.resolve <= Float || (type.resolve == Number) %}\n        Pointer(MrbInternal::MrbFloat)\n      {% else %}{% if type.resolve <= String %}\n        Pointer(LibC::Char*)\n      {% else %}\n        Pointer(MrbInternal::MrbValue)\n      {% end %}{% end %}{% end %}{% end %}\n    {% else %}{% if context %}\n      {% if context.names[0..-2].size > 0 %}\n        {% new_context = ((context.names[0..-2].join(\"::\")).gsub(/(\\:\\:)+/, \"::\")).id %}\n        MrbMacro.resolve_pointer_type({{ new_context }}::{{ raw_type.stringify.starts_with?(\"::\") ? raw_type.stringify[2..-1].id : raw_type }}, {{ raw_type }}, {{ new_context }})\n      {% else %}\n        MrbMacro.resolve_pointer_type({{ raw_type }}, {{ raw_type }})\n      {% end %}\n    {% else %}\n      {% raise(\"Could not resolve #{type}, which is a #{type.class_name}, in any meaningful way\") %}\n    {% end %}{% end %}\n\n  \n"}},{"id":"resolve_type_in_ruby(type,raw_type,context=nil)-macro","html_id":"resolve_type_in_ruby(type,raw_type,context=nil)-macro","name":"resolve_type_in_ruby","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"raw_type","doc":null,"default_value":"","external_name":"raw_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(type, raw_type, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":70,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L70"},"def":{"name":"resolve_type_in_ruby","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"raw_type","doc":null,"default_value":"","external_name":"raw_type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if type.resolve? %}\n      {% if type.resolve <= Bool %}\n        MrbInternal::MrbBool\n      {% else %}{% if type.resolve <= Int %}\n        MrbInternal::MrbInt\n      {% else %}{% if type.resolve <= Float %}\n        MrbInternal::MrbFloat\n      {% else %}{% if type.resolve <= String %}\n        # Should actually never occur due to special handling before this function\n        Pointer(LibC::Char)\n      {% else %}\n        MrbInternal::MrbValue\n      {% end %}{% end %}{% end %}{% end %}\n    {% else %}{% if context %}\n      {% if context.names[0..-2].size > 0 %}\n        {% new_context = ((context.names[0..-2].join(\"::\")).gsub(/(\\:\\:)+/, \"::\")).id %}\n        MrbMacro.resolve_type_in_ruby({{ new_context }}::{{ raw_type.stringify.starts_with?(\"::\") ? raw_type.stringify[2..-1].id : raw_type }}, {{ raw_type }}, {{ new_context }})\n      {% else %}\n        MrbMacro.resolve_type_in_ruby({{ raw_type }}, {{ raw_type }})\n      {% end %}\n    {% else %}\n      {% raise(\"Could not resolve #{type}, which is a #{type.class_name}, in any meaningful way\") %}\n    {% end %}{% end %}\n\n  \n"}},{"id":"type_in_ruby(type,context=nil)-macro","html_id":"type_in_ruby(type,context=nil)-macro","name":"type_in_ruby","doc":null,"summary":null,"abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(type, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":58,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L58"},"def":{"name":"type_in_ruby","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if type.stringify.includes?('|') %}\n      MrbInternal::MrbValue\n    {% else %}{% if type.is_a?(TypeDeclaration) %}\n      MrbMacro.type_in_ruby({{ type.type }})\n    {% else %}{% if context %}\n      MrbMacro.resolve_type_in_ruby({{ context }}::{{ type.stringify.starts_with?(\"::\") ? type.stringify[2..-1].id : type }}, {{ type }}, {{ context }})\n    {% else %}\n      MrbMacro.resolve_type_in_ruby({{ type }}, {{ type }})\n    {% end %}{% end %}{% end %}\n\n  \n"}},{"id":"wrap_all_class_methods(mrb_state,crystal_class,exclusions,verbose,context=nil)-macro","html_id":"wrap_all_class_methods(mrb_state,crystal_class,exclusions,verbose,context=nil)-macro","name":"wrap_all_class_methods","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"exclusions","doc":null,"default_value":"","external_name":"exclusions","restriction":""},{"name":"verbose","doc":null,"default_value":"","external_name":"verbose","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, exclusions, verbose, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":1093,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L1093"},"def":{"name":"wrap_all_class_methods","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"exclusions","doc":null,"default_value":"","external_name":"exclusions","restriction":""},{"name":"verbose","doc":null,"default_value":"","external_name":"verbose","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% has_specialized_method = {} of String => Bool %}\n\n\n    \n{% for method in crystal_class.resolve.class.methods %}\n      {% all_annotations_specialize_im = crystal_class.resolve.annotations(MrbWrap::SpecializeClassMethod) %}\n      {% annotation_specialize_im = all_annotations_specialize_im.find do |element|\n  (element[0].stringify == method.name.stringify) || (element[0] == method.name.stringify)\nend %}\n\n      {% if method.annotation(MrbWrap::Specialize) %}\n        {% has_specialized_method[method.name.stringify] = true %}\n      {% end %}\n\n      {% if annotation_specialize_im %}\n        {% has_specialized_method[annotation_specialize_im[0].id.stringify] = true %}\n      {% end %}\n    {% end %}\n\n\n    \n{% how_many_times_wrapped = {} of String => UInt32 %}\n\n\n    \n# TODO: Replace all im here with cm\n\n    \n{% for method, index in crystal_class.resolve.class.methods %}\n      {% all_annotations_exclude_im = crystal_class.resolve.annotations(MrbWrap::ExcludeClassMethod) %}\n      {% annotation_exclude_im = all_annotations_exclude_im.find do |element|\n  element[0].id.stringify == method.name.stringify\nend %}\n\n      {% all_annotations_specialize_im = crystal_class.resolve.annotations(MrbWrap::SpecializeClassMethod) %}\n      {% annotation_specialize_im = all_annotations_specialize_im.find do |element|\n  element[0].id.stringify == method.name.stringify\nend %}\n\n      {% all_annotations_rename_im = crystal_class.resolve.annotations(MrbWrap::RenameClassMethod) %}\n      {% annotation_rename_im = all_annotations_rename_im.find do |element|\n  element[0].id.stringify == method.name.stringify\nend %}\n\n      {% all_annotations_without_keywords_im = crystal_class.resolve.annotations(MrbWrap::WrapWithoutKeywordsClassMethod) %}\n      {% annotation_without_keyword_im = all_annotations_without_keywords_im.find do |element|\n  element[0].id.stringify == method.name.stringify\nend %}\n\n      {% if method.annotation(MrbWrap::Rename) %}\n        {% ruby_name = (method.annotation(MrbWrap::Rename))[0].id %}\n      {% else %}{% if annotation_rename_im && (method.name.stringify == annotation_rename_im[0].stringify) %}\n        {% ruby_name = annotation_rename_im[1].id %}\n      {% else %}\n        {% ruby_name = method.name %}\n      {% end %}{% end %}\n\n      {% added_keyword_args = nil %}\n\n      {% if (method.annotation(MrbWrap::Specialize)) && (method.annotation(MrbWrap::Specialize))[1] %}\n        {% added_keyword_args = (method.annotation(MrbWrap::Specialize))[1] %}\n      {% end %}\n\n      {% if annotation_specialize_im && ((method.args.stringify == annotation_specialize_im[1].stringify) || ((method.args.stringify == \"[]\") && (annotation_specialize_im[1] == nil))) %}\n        {% added_keyword_args = annotation_specialize_im[2] %}\n      {% end %}\n\n      {% without_keywords = false %}\n\n      {% if method.annotation(MrbWrap::WrapWithoutKeywords) %}\n        {% without_keywords = (method.annotation(MrbWrap::WrapWithoutKeywords))[0] ? (method.annotation(MrbWrap::WrapWithoutKeywords))[0] : -1 %}\n      {% else %}{% if annotation_without_keyword_im %}\n        {% without_keywords = annotation_without_keyword_im[1] ? annotation_without_keyword_im[1] : -1 %}\n      {% end %}{% end %}\n\n      {% if verbose\n  puts(\"> Processing class method #{crystal_class}::#{method.name} to #{ruby_name}\\n--> Args: #{method.args}\")\nend %}\n      \n      # Ignore private and protected methods (can't be called from outside, they'd need to be wrapped for this to work)\n      {% if method.visibility != (:public) %}\n        {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{method.name} (Exclusion due to visibility)\")\nend %}\n      # We already wrapped 'initialize', so we don't need to wrap these\n      {% else %}{% if (method.name == \"allocate\") || (method.name == \"new\") %}\n        {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{method.name} (Allocation method)\")\nend %}\n      # Exclude methods if given as arguments\n      {% else %}{% if (exclusions.includes?(method.name.symbolize)) || (exclusions.includes?(method.name)) %}\n        {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{method.name} (Exclusion argument)\")\nend %}\n      # Exclude methods which were annotated to be excluded\n      {% else %}{% if (method.annotation(MrbWrap::Exclude)) || (annotation_exclude_im) %}\n        {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{method.name} (Exclusion annotation)\")\nend %}\n      # Exclude methods which are not the specialized methods\n      {% else %}{% if has_specialized_method[method.name.stringify] && (!((method.annotation(MrbWrap::Specialize)) || (annotation_specialize_im && ((method.args.stringify == annotation_specialize_im[1].stringify) || ((method.args.stringify == \"[]\") && (annotation_specialize_im[1] == nil)))))) %}\n        {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{method.name} (Specialization)\")\nend %}\n      {% else %}{% if method.name[-1..-1] =~ (/\\W/) %}\n        {% operator = ruby_name %}\n\n        MrbMacro.wrap_method_index({{ mrb_state }}, {{ crystal_class }}, {{ index }}, \"{{ ruby_name }}\", operator: \"{{ operator }}\", is_class_method: true, without_keywords: -1, context: {{ context }})\n        {% how_many_times_wrapped[ruby_name.stringify] = how_many_times_wrapped[ruby_name.stringify] ? how_many_times_wrapped[ruby_name.stringify] + 1 : 1 %}\n      # Handle other class methods\n      {% else %}\n        MrbMacro.wrap_method_index({{ mrb_state }}, {{ crystal_class }}, {{ index }}, \"{{ ruby_name }}\", is_class_method: true, without_keywords: {{ without_keywords }}, added_keyword_args: {{ added_keyword_args }}, context: {{ context }})\n        {% how_many_times_wrapped[ruby_name.stringify] = how_many_times_wrapped[ruby_name.stringify] ? how_many_times_wrapped[ruby_name.stringify] + 1 : 1 %}\n      {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n\n      {% if how_many_times_wrapped[ruby_name.stringify] && how_many_times_wrapped[ruby_name.stringify] > 1 %}\n        {% puts(\"\\e[31m> WARNING: Method #{crystal_class}::#{ruby_name}\\n--> New arguments: #{method.args}\\n--> Wrapped more than once (#{how_many_times_wrapped[ruby_name.stringify]}).\\e[0m\") %}\n      {% end %}\n      {% if verbose\n  puts(\"\")\nend %}\n    {% end %}\n\n  \n"}},{"id":"wrap_all_constants(mrb_state,crystal_class,exclusions,verbose,context=nil)-macro","html_id":"wrap_all_constants(mrb_state,crystal_class,exclusions,verbose,context=nil)-macro","name":"wrap_all_constants","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"exclusions","doc":null,"default_value":"","external_name":"exclusions","restriction":""},{"name":"verbose","doc":null,"default_value":"","external_name":"verbose","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, exclusions, verbose, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":1186,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L1186"},"def":{"name":"wrap_all_constants","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"exclusions","doc":null,"default_value":"","external_name":"exclusions","restriction":""},{"name":"verbose","doc":null,"default_value":"","external_name":"verbose","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n# TODO: Is the context needed here?\n\n\n    \n# NOTE: This check is necessary due to https://github.com/crystal-lang/crystal/issues/5757\n\n    \n{% if crystal_class.resolve.type_vars.empty? %}\n      {% for constant, index in crystal_class.resolve.constants %}\n        {% all_annotations_exclude_im = crystal_class.resolve.annotations(MrbWrap::ExcludeConstant) %}\n        {% annotation_exclude_im = all_annotations_exclude_im.find do |element|\n  element[0].id.stringify == constant.stringify\nend %}\n\n        {% all_annotations_rename_im = crystal_class.resolve.annotations(MrbWrap::RenameConstant) %}\n        {% annotation_rename_im = all_annotations_rename_im.find do |element|\n  element[0].id.stringify == constant.stringify\nend %}\n\n        {% if annotation_rename_im && (constant.stringify == annotation_rename_im[0].stringify) %}\n          {% ruby_name = annotation_rename_im[1].id %}\n        {% else %}\n          {% ruby_name = constant %}\n        {% end %}\n\n        {% if verbose\n  puts(\"> Processing constant #{crystal_class}::#{constant} to #{ruby_name}\")\nend %}\n        # Exclude methods which were annotated to be excluded\n        {% if (exclusions.includes?(constant.symbolize)) || (exclusions.includes?(constant)) %}\n          {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{constant} (Exclusion argument)\")\nend %}\n        {% else %}{% if annotation_exclude_im %}\n          {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{constant} (Exclusion annotation)\")\nend %}\n        {% else %}\n          MrbMacro.wrap_constant_or_class({{ mrb_state }}, {{ crystal_class }}, \"{{ ruby_name }}\", {{ constant }}, {{ verbose }})\n        {% end %}{% end %}\n        {% if verbose\n  puts(\"\")\nend %}\n      {% end %}\n    {% end %}\n\n  \n"}},{"id":"wrap_all_instance_methods(mrb_state,crystal_class,exclusions,verbose,context=nil,use_enum_constructor=false)-macro","html_id":"wrap_all_instance_methods(mrb_state,crystal_class,exclusions,verbose,context=nil,use_enum_constructor=false)-macro","name":"wrap_all_instance_methods","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"exclusions","doc":null,"default_value":"","external_name":"exclusions","restriction":""},{"name":"verbose","doc":null,"default_value":"","external_name":"verbose","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""},{"name":"use_enum_constructor","doc":null,"default_value":"false","external_name":"use_enum_constructor","restriction":""}],"args_string":"(mrb_state, crystal_class, exclusions, verbose, context = <span class=\"n\">nil</span>, use_enum_constructor = <span class=\"n\">false</span>)","location":{"filename":"src/MrbMacro.cr","line_number":977,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L977"},"def":{"name":"wrap_all_instance_methods","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"exclusions","doc":null,"default_value":"","external_name":"exclusions","restriction":""},{"name":"verbose","doc":null,"default_value":"","external_name":"verbose","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""},{"name":"use_enum_constructor","doc":null,"default_value":"false","external_name":"use_enum_constructor","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% has_specialized_method = {} of String => Bool %}\n\n\n    \n{% for method in crystal_class.resolve.methods %}\n      {% all_annotations_specialize_im = crystal_class.resolve.annotations(MrbWrap::SpecializeInstanceMethod) %}\n      {% annotation_specialize_im = all_annotations_specialize_im.find do |element|\n  (element[0].stringify == method.name.stringify) || (element[0] == method.name.stringify)\nend %}\n\n      {% if method.annotation(MrbWrap::Specialize) %}\n        {% has_specialized_method[method.name.stringify] = true %}\n      {% end %}\n\n      {% if annotation_specialize_im %}\n        {% has_specialized_method[annotation_specialize_im[0].id.stringify] = true %}\n      {% end %}\n    {% end %}\n\n\n    \n{% how_many_times_wrapped = {} of String => UInt32 %}\n\n\n    \n{% for method, index in crystal_class.resolve.methods %}\n      {% all_annotations_exclude_im = crystal_class.resolve.annotations(MrbWrap::ExcludeInstanceMethod) %}\n      {% annotation_exclude_im = all_annotations_exclude_im.find do |element|\n  element[0].id.stringify == method.name.stringify\nend %}\n\n      {% all_annotations_specialize_im = crystal_class.resolve.annotations(MrbWrap::SpecializeInstanceMethod) %}\n      {% annotation_specialize_im = all_annotations_specialize_im.find do |element|\n  element[0].id.stringify == method.name.stringify\nend %}\n\n      {% all_annotations_rename_im = crystal_class.resolve.annotations(MrbWrap::RenameInstanceMethod) %}\n      {% annotation_rename_im = all_annotations_rename_im.find do |element|\n  element[0].id.stringify == method.name.stringify\nend %}\n\n      {% all_annotations_without_keywords_im = crystal_class.resolve.annotations(MrbWrap::WrapWithoutKeywordsInstanceMethod) %}\n      {% annotation_without_keyword_im = all_annotations_without_keywords_im.find do |element|\n  element[0].id.stringify == method.name.stringify\nend %}\n\n      {% if method.annotation(MrbWrap::Rename) %}\n        {% ruby_name = (method.annotation(MrbWrap::Rename))[0].id %}\n      {% else %}{% if annotation_rename_im && (method.name.stringify == annotation_rename_im[0].stringify) %}\n        {% ruby_name = annotation_rename_im[1].id %}\n      {% else %}\n        {% ruby_name = method.name %}\n      {% end %}{% end %}\n\n      {% added_keyword_args = nil %}\n\n      {% if (method.annotation(MrbWrap::Specialize)) && (method.annotation(MrbWrap::Specialize))[0] %}\n        {% added_keyword_args = (method.annotation(MrbWrap::Specialize))[0] %}\n      {% end %}\n\n      {% if annotation_specialize_im && ((method.args.stringify == annotation_specialize_im[1].stringify) || ((method.args.stringify == \"[]\") && (annotation_specialize_im[1] == nil))) %}\n        {% added_keyword_args = annotation_specialize_im[2] %}\n      {% end %}\n\n      {% without_keywords = false %}\n\n      {% if method.annotation(MrbWrap::WrapWithoutKeywords) %}\n        {% without_keywords = (method.annotation(MrbWrap::WrapWithoutKeywords))[0] ? (method.annotation(MrbWrap::WrapWithoutKeywords))[0] : -1 %}\n      {% else %}{% if annotation_without_keyword_im %}\n        {% without_keywords = annotation_without_keyword_im[1] ? annotation_without_keyword_im[1] : -1 %}\n      {% end %}{% end %}\n\n      {% if verbose\n  puts(\"> Processing instance method #{crystal_class}::#{method.name} to #{ruby_name}\\n--> Args: #{method.args}\")\nend %}\n      \n      # Ignore private and protected methods (can't be called from outside, they'd need to be wrapped for this to work)\n      {% if (method.visibility != (:public)) && (method.name != \"initialize\") %}\n        {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{method.name} (Exclusion due to visibility)\")\nend %}\n      # Ignore mrb hooks, to_unsafe and finalize (unless specialized, but this is not recommended)\n      {% else %}{% if (((method.name.starts_with?(\"mrb_\")) || (method.name == \"finalize\")) || (method.name == \"to_unsafe\")) && (!has_specialized_method[method.name.stringify]) %}\n        {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{method.name} (Exclusion by default)\")\nend %}\n      # Exclude methods if given as arguments\n      {% else %}{% if (exclusions.includes?(method.name.symbolize)) || (exclusions.includes?(method.name.stringify)) %}\n        {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{method.name} (Exclusion argument)\")\nend %}\n      # Exclude methods which were annotated to be excluded\n      {% else %}{% if (method.annotation(MrbWrap::Exclude)) || (annotation_exclude_im) %}\n        {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{method.name} (Exclusion annotation)\")\nend %}\n      # Exclude methods which are not the specialized methods\n      {% else %}{% if has_specialized_method[method.name.stringify] && (!((method.annotation(MrbWrap::Specialize)) || (annotation_specialize_im && ((method.args.stringify == annotation_specialize_im[1].stringify) || ((method.args.stringify == \"[]\") && (annotation_specialize_im[1] == nil)))))) %}\n        {% if verbose\n  puts(\"--> Excluding #{crystal_class}::#{method.name} #{method.args} (Specialization)\")\nend %}\n      # Handle operator methods (including setters) by just transferring the original name into the operator\n      # TODO: This might still be a source for potential bugs, so this code might need some reworking in the future\n      {% else %}{% if method.name[-1..-1] =~ (/\\W/) %}\n        {% operator = ruby_name %}\n\n        MrbMacro.wrap_method_index({{ mrb_state }}, {{ crystal_class }}, {{ index }}, \"{{ ruby_name }}\", operator: \"{{ operator }}\", without_keywords: -1, context: {{ context }})\n        {% how_many_times_wrapped[ruby_name.stringify] = how_many_times_wrapped[ruby_name.stringify] ? how_many_times_wrapped[ruby_name.stringify] + 1 : 1 %}\n      # Handle constructors\n      {% else %}{% if (method.name == \"initialize\") && (use_enum_constructor == false) %}\n        MrbMacro.wrap_method_index({{ mrb_state }}, {{ crystal_class }}, {{ index }}, \"{{ ruby_name }}\", is_constructor: true, without_keywords: {{ without_keywords }}, added_keyword_args: {{ added_keyword_args }}, context: {{ context }})\n        {% how_many_times_wrapped[ruby_name.stringify] = how_many_times_wrapped[ruby_name.stringify] ? how_many_times_wrapped[ruby_name.stringify] + 1 : 1 %}\n      # Handle other instance methods\n      {% else %}\n        MrbMacro.wrap_method_index({{ mrb_state }}, {{ crystal_class }}, {{ index }}, \"{{ ruby_name }}\", without_keywords: {{ without_keywords }}, added_keyword_args: {{ added_keyword_args }}, context: {{ context }})\n        {% how_many_times_wrapped[ruby_name.stringify] = how_many_times_wrapped[ruby_name.stringify] ? how_many_times_wrapped[ruby_name.stringify] + 1 : 1 %}\n      {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n\n      {% if how_many_times_wrapped[ruby_name.stringify] && how_many_times_wrapped[ruby_name.stringify] > 1 %}\n        {% puts(\"\\e[31m> WARNING: Method #{crystal_class}::#{ruby_name}\\n--> New arguments: #{method.args}\\n--> Wrapped more than once (#{how_many_times_wrapped[ruby_name.stringify]}).\\e[0m\") %}\n      {% end %}\n      {% if verbose\n  puts(\"\")\nend %}\n    {% end %}\n\n    \n    \n# Make sure to add a default constructor if none was specified with Crystal\n\n\n    \n{% if (!how_many_times_wrapped[\"initialize\"]) && (!use_enum_constructor) %}\n      MrbMacro.add_default_constructor({{ mrb_state }}, {{ crystal_class }}, {{ verbose }})\n    {% else %}{% if (!how_many_times_wrapped[\"initialize\"]) && use_enum_constructor %}\n      MrbMacro.add_enum_constructor({{ mrb_state }}, {{ crystal_class }}, {{ verbose }})\n    {% end %}{% end %}\n\n  \n"}},{"id":"wrap_class_method_with_args(mrb_state,crystal_class,name,proc,regular_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_class_method_with_args(mrb_state,crystal_class,name,proc,regular_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_class_method_with_args","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, name, proc, regular_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":673,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L673"},"def":{"name":"wrap_class_method_with_args","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if regular_args.is_a?(ArrayLiteral) %}\n      {% regular_arg_array = regular_args %}\n    {% else %}{% if regular_args == nil %}\n      {% regular_arg_array = nil %}\n    {% else %}\n      {% regular_arg_array = [regular_args] %}\n    {% end %}{% end %}\n\n\n    \n{% type_vars = crystal_class.resolve.type_vars %}\n\n    \n{% type_var_names_annotation = crystal_class.resolve.annotation(MrbWrap::SpecifyGenericTypes) %}\n\n    \n{% type_var_names = type_var_names_annotation ? type_var_names_annotation[0] : nil %}\n\n\n    wrapped_method = MrbFunc.new do |mrb, obj|\n      converted_args = MrbMacro.get_converted_args(mrb, \n{{ regular_arg_array }}\n, context: \n{{ context }}\n)\n      MrbMacro.call_and_return(mrb, \n{{ proc }}\n, \n{{ regular_arg_array }}\n, converted_args, operator: \n{{ operator }}\n)\n    \nend\n    \n    \n{{ mrb_state }}\n.define_class_method(\n{{ name }}\n, MrbClassCache.get(\n{{ crystal_class }}\n), wrapped_method)\n  \n"}},{"id":"wrap_class_method_with_keyword_args(mrb_state,crystal_class,name,proc,keyword_args,regular_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_class_method_with_keyword_args(mrb_state,crystal_class,name,proc,keyword_args,regular_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_class_method_with_keyword_args","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, name, proc, keyword_args, regular_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":694,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L694"},"def":{"name":"wrap_class_method_with_keyword_args","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if regular_args.is_a?(ArrayLiteral) %}\n      {% regular_arg_array = regular_args %}\n    {% else %}{% if regular_args == nil %}\n      {% regular_arg_array = nil %}\n    {% else %}\n      {% regular_arg_array = [regular_args] %}\n    {% end %}{% end %}\n\n\n    \n{% type_vars = crystal_class.resolve.type_vars %}\n\n    \n{% type_var_names_annotation = crystal_class.resolve.annotation(MrbWrap::SpecifyGenericTypes) %}\n\n    \n{% type_var_names = type_var_names_annotation ? type_var_names_annotation[0] : nil %}\n\n\n    wrapped_method = MrbFunc.new do |mrb, obj|\n      regular_arg_tuple = MrbMacro.generate_arg_tuple(\n{{ mrb_state }}\n, \n{{ regular_arg_array }}\n, context: \n{{ context }}\n)\n      format_string = MrbMacro.format_string(\n{{ regular_arg_array }}\n, context: \n{{ context }}\n) + \":\"\n\n      kw_args = MrbMacro.generate_keyword_argument_struct(\n{{ mrb_state }}\n, \n{{ keyword_args }}\n)\n      MrbInternal.mrb_get_args(mrb, format_string, *regular_arg_tuple, pointerof(kw_args))\n\n      converted_regular_args = MrbMacro.convert_args(mrb, regular_arg_tuple, \n{{ regular_arg_array }}\n, context: \n{{ context }}\n)\n\n      \n{% if (!regular_arg_array) || (regular_arg_array.size == 0) %}\n        MrbMacro.call_and_return_keyword_method(mrb, {{ proc }}, converted_regular_args, {{ keyword_args }}, kw_args, operator: {{ operator }}, \n          empty_regular: true, context: {{ context }}, type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }})\n      {% else %}\n        MrbMacro.call_and_return_keyword_method(mrb, {{ proc }}, converted_regular_args, {{ keyword_args }}, kw_args, operator: {{ operator }}, \n          context: {{ context }}, type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }})\n      {% end %}\n\n    \nend\n\n    \n{{ mrb_state }}\n.define_class_method(\n{{ name }}\n, MrbClassCache.get(\n{{ crystal_class }}\n), wrapped_method)\n  \n"}},{"id":"wrap_constant_or_class(mrb_state,under_class_or_module,ruby_name,value,verbose=false)-macro","html_id":"wrap_constant_or_class(mrb_state,under_class_or_module,ruby_name,value,verbose=false)-macro","name":"wrap_constant_or_class","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_class_or_module","doc":null,"default_value":"","external_name":"under_class_or_module","restriction":""},{"name":"ruby_name","doc":null,"default_value":"","external_name":"ruby_name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"verbose","doc":null,"default_value":"false","external_name":"verbose","restriction":""}],"args_string":"(mrb_state, under_class_or_module, ruby_name, value, verbose = <span class=\"n\">false</span>)","location":{"filename":"src/MrbMacro.cr","line_number":1218,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L1218"},"def":{"name":"wrap_constant_or_class","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_class_or_module","doc":null,"default_value":"","external_name":"under_class_or_module","restriction":""},{"name":"ruby_name","doc":null,"default_value":"","external_name":"ruby_name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""},{"name":"verbose","doc":null,"default_value":"false","external_name":"verbose","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% actual_constant = under_class_or_module.resolve.constant(value.id) %}\n\n    \n{% if actual_constant.is_a?(TypeNode) %}\n      {% if actual_constant.module? %}\n        MrbWrap.wrap_module_with_methods({{ mrb_state }}, {{ actual_constant }}, under: {{ under_class_or_module }}, verbose: {{ verbose }})\n      {% else %}{% if actual_constant.class? || actual_constant.struct? %}\n        MrbWrap.wrap_class_with_methods({{ mrb_state }}, {{ actual_constant }}, under: {{ under_class_or_module }}, verbose: {{ verbose }})\n      {% else %}{% if actual_constant.union? %}\n        {% puts(\"\\e[31m> WARNING: Wrapping of unions not supported, thus skipping #{actual_constant}\\e[0m\") %}\n      {% else %}{% if actual_constant < Enum %}\n        MrbWrap.wrap_class_with_methods({{ mrb_state }}, {{ actual_constant }}, under: {{ under_class_or_module }}, use_enum_constructor: true, verbose: {{ verbose }})\n      {% else %}\n        # Could be an alias, just try the default case\n        MrbWrap.wrap_class_with_methods({{ mrb_state }}, {{ actual_constant }}, under: {{ under_class_or_module }}, verbose: {{ verbose }})\n      {% end %}{% end %}{% end %}{% end %}\n    {% else %}\n      MrbWrap.wrap_constant_under_class({{ mrb_state }}, {{ under_class_or_module }}, {{ ruby_name }}, {{ under_class_or_module }}::{{ value }})\n    {% end %}\n\n  \n"}},{"id":"wrap_constructor_function_with_args(mrb_state,crystal_class,proc,regular_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_constructor_function_with_args(mrb_state,crystal_class,proc,regular_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_constructor_function_with_args","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, proc, regular_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":796,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L796"},"def":{"name":"wrap_constructor_function_with_args","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if regular_args.is_a?(ArrayLiteral) %}\n      {% regular_arg_array = regular_args %}\n    {% else %}{% if regular_args == nil %}\n      {% regular_arg_array = nil %}\n    {% else %}\n      {% regular_arg_array = [regular_args] %}\n    {% end %}{% end %}\n\n\n    \n{% type_vars = crystal_class.resolve.type_vars %}\n\n    \n{% type_var_names_annotation = crystal_class.resolve.annotation(MrbWrap::SpecifyGenericTypes) %}\n\n    \n{% type_var_names = type_var_names_annotation ? type_var_names_annotation[0] : nil %}\n\n\n    wrapped_method = MrbFunc.new do |mrb, obj|\n      converted_args = MrbMacro.get_converted_args(mrb, \n{{ regular_arg_array }}\n, context: \n{{ context }}\n)\n      new_obj = \n{{ proc }}\n{{ operator.id }}\n(*converted_args)\n\n      MrbMacro.allocate_constructed_object(\n{{ crystal_class }}\n, obj, new_obj)\n      obj\n    \nend\n\n    \n{{ mrb_state }}\n.define_method(\"initialize\", MrbClassCache.get(\n{{ crystal_class }}\n), wrapped_method)\n  \n"}},{"id":"wrap_constructor_function_with_keyword_args(mrb_state,crystal_class,proc,keyword_args,regular_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_constructor_function_with_keyword_args(mrb_state,crystal_class,proc,keyword_args,regular_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_constructor_function_with_keyword_args","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, proc, keyword_args, regular_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":820,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L820"},"def":{"name":"wrap_constructor_function_with_keyword_args","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if regular_args.is_a?(ArrayLiteral) %}\n      {% regular_arg_array = regular_args %}\n    {% else %}{% if regular_args == nil %}\n      {% regular_arg_array = nil %}\n    {% else %}\n      {% regular_arg_array = [regular_args] %}\n    {% end %}{% end %}\n\n\n    \n{% type_vars = crystal_class.resolve.type_vars %}\n\n    \n{% type_var_names_annotation = crystal_class.resolve.annotation(MrbWrap::SpecifyGenericTypes) %}\n\n    \n{% type_var_names = type_var_names_annotation ? type_var_names_annotation[0] : nil %}\n\n\n    wrapped_method = MrbFunc.new do |mrb, obj|\n      regular_arg_tuple = MrbMacro.generate_arg_tuple(\n{{ mrb_state }}\n, \n{{ regular_arg_array }}\n, context: \n{{ context }}\n)\n      format_string = MrbMacro.format_string(\n{{ regular_arg_array }}\n, context: \n{{ context }}\n) + \":\"\n\n      kw_args = MrbMacro.generate_keyword_argument_struct(\n{{ mrb_state }}\n, \n{{ keyword_args }}\n)\n      MrbInternal.mrb_get_args(mrb, format_string, *regular_arg_tuple, pointerof(kw_args))\n\n      converted_regular_args = MrbMacro.convert_args(mrb, regular_arg_tuple, \n{{ regular_arg_array }}\n, context: \n{{ context }}\n)\n\n      \n{% if (!regular_arg_array) || (regular_arg_array.size == 0) %}\n        new_obj = {{ proc }}{{ operator.id }}(\n          {% c = 0 %}\n          {% for keyword in keyword_args %}\n            {{ keyword.var.id }}: MrbMacro.convert_keyword_arg(mrb, kw_args.values[{{ c }}], {{ keyword }}, context: {{ context }}, \n              type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }}, debug_information: {{ (proc.stringify + \" - \") + keyword_args.stringify }}),\n            {% c += 1 %}\n          {% end %}\n        )\n      {% else %}\n        new_obj = {{ proc }}{{ operator.id }}(*converted_regular_args,\n          {% c = 0 %}\n          {% for keyword in keyword_args %}\n            {{ keyword.var.id }}: MrbMacro.convert_keyword_arg(mrb, kw_args.values[{{ c }}], {{ keyword }}, context: {{ context }}, \n              type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }}, debug_information: {{ (proc.stringify + \" - \") + keyword_args.stringify }}),\n            {% c += 1 %}\n          {% end %}\n        )\n      {% end %}\n\n\n      MrbMacro.allocate_constructed_object(\n{{ crystal_class }}\n, obj, new_obj)\n      obj\n    \nend\n\n    \n{{ mrb_state }}\n.define_method(\"initialize\", MrbClassCache.get(\n{{ crystal_class }}\n), wrapped_method)\n  \n"}},{"id":"wrap_instance_function_with_args(mrb_state,crystal_class,name,proc,regular_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_instance_function_with_args(mrb_state,crystal_class,name,proc,regular_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_instance_function_with_args","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, name, proc, regular_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":728,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L728"},"def":{"name":"wrap_instance_function_with_args","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if regular_args.is_a?(ArrayLiteral) %}\n      {% regular_arg_array = regular_args %}\n    {% else %}{% if regular_args == nil %}\n      {% regular_arg_array = nil %}\n    {% else %}\n      {% regular_arg_array = [regular_args] %}\n    {% end %}{% end %}\n\n\n    \n{% type_vars = crystal_class.resolve.type_vars %}\n\n    \n{% type_var_names_annotation = crystal_class.resolve.annotation(MrbWrap::SpecifyGenericTypes) %}\n\n    \n{% type_var_names = type_var_names_annotation ? type_var_names_annotation[0] : nil %}\n\n\n    wrapped_method = MrbFunc.new do |mrb, obj|\n      converted_args = MrbMacro.get_converted_args(mrb, \n{{ regular_arg_array }}\n, context: \n{{ context }}\n)\n\n      if \n{{ crystal_class }}\n <= Struct\n        converted_obj = MrbMacro.convert_from_ruby_struct(mrb, obj, \n{{ crystal_class }}\n).value\n      \nelse\n        converted_obj = MrbMacro.convert_from_ruby_object(mrb, obj, \n{{ crystal_class }}\n).value\n      \nend\n\n      MrbMacro.call_and_return_instance_method(mrb, \n{{ proc }}\n, converted_obj, converted_args, operator: \n{{ operator }}\n)\n    \nend\n\n    \n{{ mrb_state }}\n.define_method(\n{{ name }}\n, MrbClassCache.get(\n{{ crystal_class }}\n), wrapped_method)\n  \n"}},{"id":"wrap_instance_function_with_keyword_args(mrb_state,crystal_class,name,proc,keyword_args,regular_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_instance_function_with_keyword_args(mrb_state,crystal_class,name,proc,keyword_args,regular_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_instance_function_with_keyword_args","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, name, proc, keyword_args, regular_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":756,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L756"},"def":{"name":"wrap_instance_function_with_keyword_args","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if regular_args.is_a?(ArrayLiteral) %}\n      {% regular_arg_array = regular_args %}\n    {% else %}{% if regular_args == nil %}\n      {% regular_arg_array = nil %}\n    {% else %}\n      {% regular_arg_array = [regular_args] %}\n    {% end %}{% end %}\n\n\n    \n{% type_vars = crystal_class.resolve.type_vars %}\n\n    \n{% type_var_names_annotation = crystal_class.resolve.annotation(MrbWrap::SpecifyGenericTypes) %}\n\n    \n{% type_var_names = type_var_names_annotation ? type_var_names_annotation[0] : nil %}\n\n\n    wrapped_method = MrbFunc.new do |mrb, obj|\n      regular_arg_tuple = MrbMacro.generate_arg_tuple(\n{{ mrb_state }}\n, \n{{ regular_arg_array }}\n, context: \n{{ context }}\n)\n      format_string = MrbMacro.format_string(\n{{ regular_arg_array }}\n, context: \n{{ context }}\n) + \":\"\n\n      kw_args = MrbMacro.generate_keyword_argument_struct(\n{{ mrb_state }}\n, \n{{ keyword_args }}\n)\n      MrbInternal.mrb_get_args(mrb, format_string, *regular_arg_tuple, pointerof(kw_args))\n\n      converted_regular_args = MrbMacro.convert_args(mrb, regular_arg_tuple, \n{{ regular_arg_array }}\n, context: \n{{ context }}\n)\n\n      if \n{{ crystal_class }}\n <= Struct\n        converted_obj = MrbMacro.convert_from_ruby_struct(mrb, obj, \n{{ crystal_class }}\n).value\n      \nelse\n        converted_obj = MrbMacro.convert_from_ruby_object(mrb, obj, \n{{ crystal_class }}\n).value\n      \nend\n\n      \n{% if (!regular_arg_array) || (regular_arg_array.size == 0) %}\n        MrbMacro.call_and_return_keyword_instance_method(mrb, {{ proc }}, converted_obj, converted_regular_args, {{ keyword_args }}, kw_args, operator: {{ operator }}, \n          empty_regular: true, context: {{ context }}, type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }})\n      {% else %}\n        MrbMacro.call_and_return_keyword_instance_method(mrb, {{ proc }}, converted_obj, converted_regular_args, {{ keyword_args }}, kw_args, operator: {{ operator }}, \n          context: {{ context }}, type_vars: {{ type_vars }}, type_var_names: {{ type_var_names }})\n      {% end %}\n\n    \nend\n\n    \n{{ mrb_state }}\n.define_method(\n{{ name }}\n, MrbClassCache.get(\n{{ crystal_class }}\n), wrapped_method)\n  \n"}},{"id":"wrap_method_index(mrb_state,crystal_class,method_index,ruby_name,is_constructor=false,is_class_method=false,operator=&quot;&quot;,cut_name=nil,without_keywords=false,added_keyword_args=nil,context=nil)-macro","html_id":"wrap_method_index(mrb_state,crystal_class,method_index,ruby_name,is_constructor=false,is_class_method=false,operator=&amp;quot;&amp;quot;,cut_name=nil,without_keywords=false,added_keyword_args=nil,context=nil)-macro","name":"wrap_method_index","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"method_index","doc":null,"default_value":"","external_name":"method_index","restriction":""},{"name":"ruby_name","doc":null,"default_value":"","external_name":"ruby_name","restriction":""},{"name":"is_constructor","doc":null,"default_value":"false","external_name":"is_constructor","restriction":""},{"name":"is_class_method","doc":null,"default_value":"false","external_name":"is_class_method","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"cut_name","doc":null,"default_value":"nil","external_name":"cut_name","restriction":""},{"name":"without_keywords","doc":null,"default_value":"false","external_name":"without_keywords","restriction":""},{"name":"added_keyword_args","doc":null,"default_value":"nil","external_name":"added_keyword_args","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, method_index, ruby_name, is_constructor = <span class=\"n\">false</span>, is_class_method = <span class=\"n\">false</span>, operator = <span class=\"s\">&quot;&quot;</span>, cut_name = <span class=\"n\">nil</span>, without_keywords = <span class=\"n\">false</span>, added_keyword_args = <span class=\"n\">nil</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":869,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L869"},"def":{"name":"wrap_method_index","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"method_index","doc":null,"default_value":"","external_name":"method_index","restriction":""},{"name":"ruby_name","doc":null,"default_value":"","external_name":"ruby_name","restriction":""},{"name":"is_constructor","doc":null,"default_value":"false","external_name":"is_constructor","restriction":""},{"name":"is_class_method","doc":null,"default_value":"false","external_name":"is_class_method","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"cut_name","doc":null,"default_value":"nil","external_name":"cut_name","restriction":""},{"name":"without_keywords","doc":null,"default_value":"false","external_name":"without_keywords","restriction":""},{"name":"added_keyword_args","doc":null,"default_value":"nil","external_name":"added_keyword_args","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if is_class_method %}\n      {% method = crystal_class.resolve.class.methods[method_index] %}\n    {% else %}\n      {% method = crystal_class.resolve.methods[method_index] %}\n    {% end %}\n\n\n    \n{% if !operator.empty? %}\n      {% if cut_name %}\n        {% if is_class_method %}\n          {% final_method_name = \"#{crystal_class}.#{cut_name}\".id %}\n          {% final_operator = \"#{crystal_class}.#{operator.id}\" %}\n        {% else %}\n          {% final_method_name = cut_name %}\n          {% final_operator = operator %}\n        {% end %}\n      {% else %}\n        {% final_method_name = MrbWrap::Empty %}\n        {% if is_class_method %}\n          {% final_operator = \"#{crystal_class}.#{operator.id}\" %}\n        {% else %}\n          {% final_operator = operator %}\n        {% end %}\n      {% end %}\n    {% else %}\n      {% if is_class_method %}\n        {% final_method_name = \"#{crystal_class}.#{method.name}\".id %}\n      {% else %}\n        {% final_method_name = method.name %}\n      {% end %}\n      {% final_operator = operator %}\n    {% end %}\n\n\n    \n{% final_arg_array = added_keyword_args ? added_keyword_args : method.args %}\n\n\n    \n{% if final_arg_array.empty? %}\n      {% if is_class_method %}\n        MrbWrap.wrap_class_method({{ mrb_state }}, {{ crystal_class }}, {{ ruby_name }}, {{ final_method_name }}, operator: {{ final_operator }}, context: {{ context }})\n      {% else %}{% if is_constructor %}\n        MrbWrap.wrap_constructor({{ mrb_state }}, {{ crystal_class }}, context: {{ context }})\n      {% else %}\n        MrbWrap.wrap_instance_method({{ mrb_state }}, {{ crystal_class }}, {{ ruby_name }}, {{ final_method_name }}, operator: {{ final_operator }}, context: {{ context }})\n      {% end %}{% end %}\n\n    # A complicated check, but it is more stable than simply checking for colons\n    {% else %}{% if final_arg_array.find do |m|\n  (m.is_a?(TypeDeclaration) && m.type) || (m.is_a?(Arg) && m.restriction)\nend %}\n      {% if without_keywords %}\n        {% if without_keywords >= final_arg_array.size %}\n          {% regular_arg_partition = nil %}\n          {% keyword_arg_partition = final_arg_array %}\n        {% else %}{% if without_keywords < 0 %}\n          {% regular_arg_partition = final_arg_array %}\n          {% keyword_arg_partition = nil %}\n        {% else %}\n          {% regular_arg_partition = final_arg_array[0..(without_keywords - 1)] %}\n          {% keyword_arg_partition = final_arg_array[without_keywords..-1] %}\n        {% end %}{% end %}\n\n        {% if keyword_arg_partition %}\n          {% if is_class_method %}\n            MrbWrap.wrap_class_method_with_keywords({{ mrb_state }}, {{ crystal_class }}, {{ ruby_name }}, {{ final_method_name }}, \n              {{ keyword_arg_partition }}, regular_args: {{ regular_arg_partition }}, operator: {{ final_operator }}, context: {{ context }})\n          {% else %}{% if is_constructor %}\n            MrbWrap.wrap_constructor_with_keywords({{ mrb_state }}, {{ crystal_class }}, \n              {{ keyword_arg_partition }}, regular_args: {{ regular_arg_partition }}, operator: {{ final_operator }}, context: {{ context }})\n          {% else %}\n            MrbWrap.wrap_instance_method_with_keywords({{ mrb_state }}, {{ crystal_class }}, {{ ruby_name }}, {{ final_method_name }}, \n              {{ keyword_arg_partition }}, regular_args: {{ regular_arg_partition }}, operator: {{ final_operator }}, context: {{ context }})\n          {% end %}{% end %}\n        {% else %}\n          {% if is_class_method %}\n            MrbWrap.wrap_class_method({{ mrb_state }}, {{ crystal_class }}, {{ ruby_name }}, {{ final_method_name }}, \n              {{ regular_arg_partition }}, operator: {{ final_operator }}, context: {{ context }})\n          {% else %}{% if is_constructor %}\n            MrbWrap.wrap_constructor({{ mrb_state }}, {{ crystal_class }}, \n              {{ regular_arg_partition }}, operator: {{ final_operator }}, context: {{ context }})\n          {% else %}\n            MrbWrap.wrap_instance_method({{ mrb_state }}, {{ crystal_class }}, {{ ruby_name }}, {{ final_method_name }}, \n              {{ regular_arg_partition }}, operator: {{ final_operator }}, context: {{ context }})\n          {% end %}{% end %}\n        {% end %}\n      {% else %}\n        {% if is_class_method %}\n          MrbWrap.wrap_class_method_with_keywords({{ mrb_state }}, {{ crystal_class }}, {{ ruby_name }}, {{ final_method_name }}, \n            {{ final_arg_array }}, operator: {{ final_operator }}, context: {{ context }})\n        {% else %}{% if is_constructor %}\n          MrbWrap.wrap_constructor_with_keywords({{ mrb_state }}, {{ crystal_class }}, \n            {{ final_arg_array }}, operator: {{ final_operator }}, context: {{ context }})\n        {% else %}\n          MrbWrap.wrap_instance_method_with_keywords({{ mrb_state }}, {{ crystal_class }}, {{ ruby_name }}, {{ final_method_name }}, \n            {{ final_arg_array }}, operator: {{ final_operator }}, context: {{ context }})\n        {% end %}{% end %}\n      {% end %}\n\n    {% else %}\n      {% if is_class_method %}\n        {% puts(\"\\e[33m> INFO: Could not wrap function '#{crystal_class}.#{method.name}' with args #{method.args}.\\e[0m\") %}\n      {% else %}\n        {% puts(\"\\e[33m> INFO: Could not wrap function '#{method.name}' with args #{method.args}.\\e[0m\") %}\n      {% end %}\n    {% end %}{% end %}\n\n  \n"}},{"id":"wrap_module_function_with_args(mrb_state,under_module,name,proc,regular_args=nil,context=nil)-macro","html_id":"wrap_module_function_with_args(mrb_state,under_module,name,proc,regular_args=nil,context=nil)-macro","name":"wrap_module_function_with_args","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_module","doc":null,"default_value":"","external_name":"under_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, under_module, name, proc, regular_args = <span class=\"n\">nil</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":622,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L622"},"def":{"name":"wrap_module_function_with_args","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_module","doc":null,"default_value":"","external_name":"under_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if regular_args.is_a?(ArrayLiteral) %}\n      {% regular_arg_array = regular_args %}\n    {% else %}{% if regular_args == nil %}\n      {% regular_arg_array = nil %}\n    {% else %}\n      {% regular_arg_array = [regular_args] %}\n    {% end %}{% end %}\n\n\n    \n{% type_vars = crystal_class.resolve.type_vars %}\n\n    \n{% type_var_names_annotation = crystal_class.resolve.annotation(MrbWrap::SpecifyGenericTypes) %}\n\n    \n{% type_var_names = type_var_names_annotation ? type_var_names_annotation[0] : nil %}\n\n\n    \n{% proc_arg_array = MrbMacro.put_args_in_array(regular_args) %}\n\n\n    wrapped_method = MrbFunc.new do |mrb, obj|\n      converted_args = MrbMacro.get_converted_args(mrb, \n{{ proc_arg_array }}\n, context: \n{{ context }}\n)\n      MrbMacro.call_and_return(mrb, \n{{ proc }}\n, \n{{ proc_arg_array }}\n, converted_args)\n    \nend\n\n    \n{{ mrb_state }}\n.define_module_function(\n{{ name }}\n, MrbClassCache.get(\n{{ under_module }}\n), wrapped_method)\n  \n"}},{"id":"wrap_module_function_with_keyword_args(mrb_state,under_module,name,proc,keyword_args,regular_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_module_function_with_keyword_args(mrb_state,under_module,name,proc,keyword_args,regular_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_module_function_with_keyword_args","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_module","doc":null,"default_value":"","external_name":"under_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, under_module, name, proc, keyword_args, regular_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbMacro.cr","line_number":645,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbMacro.cr#L645"},"def":{"name":"wrap_module_function_with_keyword_args","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_module","doc":null,"default_value":"","external_name":"under_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if regular_args.is_a?(ArrayLiteral) %}\n      {% regular_arg_array = regular_args %}\n    {% else %}{% if regular_args == nil %}\n      {% regular_arg_array = nil %}\n    {% else %}\n      {% regular_arg_array = [regular_args] %}\n    {% end %}{% end %}\n\n\n    wrapped_method = MrbFunc.new do |mrb, obj|\n      regular_arg_tuple = MrbMacro.generate_arg_tuple(\n{{ mrb_state }}\n, \n{{ regular_arg_array }}\n, context: \n{{ context }}\n)\n      format_string = MrbMacro.format_string(\n{{ regular_arg_array }}\n, context: \n{{ context }}\n) + \":\"\n\n      kw_args = MrbMacro.generate_keyword_argument_struct(\n{{ mrb_state }}\n, \n{{ keyword_args }}\n)\n      MrbInternal.mrb_get_args(mrb, format_string, *regular_arg_tuple, pointerof(kw_args))\n\n      converted_regular_args = MrbMacro.convert_args(mrb, regular_arg_tuple, \n{{ regular_arg_array }}\n, context: \n{{ context }}\n)\n\n      \n{% if (!regular_arg_array) || (regular_arg_array.size == 0) %}\n        MrbMacro.call_and_return_keyword_method(mrb, {{ proc }}, converted_regular_args, {{ keyword_args }}, kw_args, operator: {{ operator }}, empty_regular: true, context: {{ context }})\n      {% else %}\n        MrbMacro.call_and_return_keyword_method(mrb, {{ proc }}, converted_regular_args, {{ keyword_args }}, kw_args, operator: {{ operator }}, context: {{ context }})\n      {% end %}\n\n    \nend\n\n    \n{{ mrb_state }}\n.define_module_function(\n{{ name }}\n, MrbClassCache.get(\n{{ under_module }}\n), wrapped_method)\n  \n"}}],"types":[]},{"html_id":"anyolite/MrbModule","path":"MrbModule.html","kind":"class","full_name":"MrbModule","name":"MrbModule","abstract":false,"superclass":{"html_id":"anyolite/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"anyolite/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"anyolite/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/MrbModule.cr","line_number":2,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbModule.cr#L2"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Reference to a mruby module","summary":"<p>Reference to a mruby module</p>","class_methods":[],"constructors":[{"id":"new(mrb:MrbState,name:String,under:MrbModule|MrbClass|Nil=nil)-class-method","html_id":"new(mrb:MrbState,name:String,under:MrbModule|MrbClass|Nil=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"MrbState"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":"MrbModule | MrbClass | Nil"}],"args_string":"(mrb : MrbState, name : String, under : MrbModule | MrbClass | Nil = <span class=\"n\">nil</span>)","args_html":"(mrb : <a href=\"MrbState.html\">MrbState</a>, name : String, under : <a href=\"MrbModule.html\">MrbModule</a> | <a href=\"MrbClass.html\">MrbClass</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbModule.cr","line_number":5,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbModule.cr#L5"},"def":{"name":"new","args":[{"name":"mrb","doc":null,"default_value":"","external_name":"mrb","restriction":"MrbState"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":"MrbModule | MrbClass | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(mrb, name, under)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"to_unsafe-instance-method","html_id":"to_unsafe-instance-method","name":"to_unsafe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/MrbModule.cr","line_number":13,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbModule.cr#L13"},"def":{"name":"to_unsafe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return @module_ptr"}}],"macros":[],"types":[]},{"html_id":"anyolite/MrbRefTable","path":"MrbRefTable.html","kind":"module","full_name":"MrbRefTable","name":"MrbRefTable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbRefTable.cr","line_number":7,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbRefTable.cr#L7"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"This is a very simple approach to generate artificial references to the wrapped objects.\nTherefore, the GC won't delete the wrapped objects until necessary.\nNote that this is currently one-directional, so mruby might still delete Crystal objects generated from Crystal itself.\nFurthermore, this is only possible as a module due to C closure limitations.\n\nTODO: Add compilation option for ignoring entry checks","summary":"<p>This is a very simple approach to generate artificial references to the wrapped objects.</p>","class_methods":[{"id":"add(identification,value)-class-method","html_id":"add(identification,value)-class-method","name":"add","doc":null,"summary":null,"abstract":false,"args":[{"name":"identification","doc":null,"default_value":"","external_name":"identification","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(identification, value)","args_html":"(identification, value)","location":{"filename":"src/MrbRefTable.cr","line_number":20,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbRefTable.cr#L20"},"def":{"name":"add","args":[{"name":"identification","doc":null,"default_value":"","external_name":"identification","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if option_active?(:logging)\n  puts(\"> Added reference #{identification} -> #{value}\")\nend\nif @@content[identification]?\n  if value != @@content[identification][0]\n    if option_active?(:warnings)\n      puts(\"WARNING: Value #{identification} replaced pointers (#{value} vs #{@@content[identification][0]}).\")\n    end\n    if option_active?(:replace_conflicting_pointers)\n      @@content[identification] = {value, @@content[identification][1] + 1}\n    else\n      @@content[identification] = {@@content[identification][0], @@content[identification][1] + 1}\n    end\n  else\n    @@content[identification] = {value, @@content[identification][1] + 1}\n  end\nelse\n  @@content[identification] = {value, 1_i64}\nend\n"}},{"id":"delete(identification)-class-method","html_id":"delete(identification)-class-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"identification","doc":null,"default_value":"","external_name":"identification","restriction":""}],"args_string":"(identification)","args_html":"(identification)","location":{"filename":"src/MrbRefTable.cr","line_number":38,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbRefTable.cr#L38"},"def":{"name":"delete","args":[{"name":"identification","doc":null,"default_value":"","external_name":"identification","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if option_active?(:logging)\n  puts(\"> Removed reference #{identification}\")\nend\nif @@content[identification]?\n  @@content[identification] = {@@content[identification][0], @@content[identification][1] - 1}\n  if @@content[identification][1] <= 0\n    @@content.delete(identification)\n  end\nelse\n  if option_active?(:warnings)\n    puts(\"WARNING: Tried to remove unregistered object #{identification} from reference table.\")\n  end\nend\nnil\n"}},{"id":"get(identification)-class-method","html_id":"get(identification)-class-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"identification","doc":null,"default_value":"","external_name":"identification","restriction":""}],"args_string":"(identification)","args_html":"(identification)","location":{"filename":"src/MrbRefTable.cr","line_number":16,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbRefTable.cr#L16"},"def":{"name":"get","args":[{"name":"identification","doc":null,"default_value":"","external_name":"identification","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return @@content[identification][0]"}},{"id":"get_object_id(value)-class-method","html_id":"get_object_id(value)-class-method","name":"get_object_id","doc":"TODO: If a struct wrapper is given here, call the struct methods instead of the wrapper methods","summary":"<p><span class=\"flag orange\">TODO</span>  If a struct wrapper is given here, call the struct methods instead of the wrapper methods</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/MrbRefTable.cr","line_number":64,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbRefTable.cr#L64"},"def":{"name":"get_object_id","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if value.responds_to?(:mrb_ref_id)\n  value.mrb_ref_id.to_u64\nelse\n  if value.responds_to?(:object_id)\n    value.object_id.to_u64\n  else\n    value.hash.to_u64\n  end\nend"}},{"id":"inspect-class-method","html_id":"inspect-class-method","name":"inspect","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/MrbRefTable.cr","line_number":55,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbRefTable.cr#L55"},"def":{"name":"inspect","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@content.inspect"}},{"id":"is_registered?(identification)-class-method","html_id":"is_registered?(identification)-class-method","name":"is_registered?","doc":null,"summary":null,"abstract":false,"args":[{"name":"identification","doc":null,"default_value":"","external_name":"identification","restriction":""}],"args_string":"(identification)","args_html":"(identification)","location":{"filename":"src/MrbRefTable.cr","line_number":51,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbRefTable.cr#L51"},"def":{"name":"is_registered?","args":[{"name":"identification","doc":null,"default_value":"","external_name":"identification","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return @@content[identification]?"}},{"id":"option_active?(symbol)-class-method","html_id":"option_active?(symbol)-class-method","name":"option_active?","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"args_string":"(symbol)","args_html":"(symbol)","location":{"filename":"src/MrbRefTable.cr","line_number":74,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbRefTable.cr#L74"},"def":{"name":"option_active?","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @@options[symbol]?\n  @@options[symbol]\nelse\n  false\nend"}},{"id":"reset-class-method","html_id":"reset-class-method","name":"reset","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/MrbRefTable.cr","line_number":59,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbRefTable.cr#L59"},"def":{"name":"reset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@content.clear"}},{"id":"set_option(symbol)-class-method","html_id":"set_option(symbol)-class-method","name":"set_option","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"args_string":"(symbol)","args_html":"(symbol)","location":{"filename":"src/MrbRefTable.cr","line_number":82,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbRefTable.cr#L82"},"def":{"name":"set_option","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@options[symbol] = true"}},{"id":"unset_option(symbol)-class-method","html_id":"unset_option(symbol)-class-method","name":"unset_option","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"args_string":"(symbol)","args_html":"(symbol)","location":{"filename":"src/MrbRefTable.cr","line_number":86,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbRefTable.cr#L86"},"def":{"name":"unset_option","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@options[symbol] = false"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbState","path":"MrbState.html","kind":"class","full_name":"MrbState","name":"MrbState","abstract":false,"superclass":{"html_id":"anyolite/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"anyolite/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"anyolite/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/MrbState.cr","line_number":2,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbState.cr#L2"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Wrapper for an mruby state reference","summary":"<p>Wrapper for an mruby state reference</p>","class_methods":[{"id":"create(&)-class-method","html_id":"create(&)-class-method","name":"create","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/MrbState.cr","line_number":5,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbState.cr#L5"},"def":{"name":"create","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"mrb = self.new\nyield mrb\nmrb.close\n"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/MrbState.cr","line_number":11,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbState.cr#L11"},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"close-instance-method","html_id":"close-instance-method","name":"close","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/MrbState.cr","line_number":15,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbState.cr#L15"},"def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MrbInternal.mrb_close(@mrb_ptr)"}},{"id":"define_class_method(name:String,c:MrbClass|MrbModule,proc:MrbFunc)-instance-method","html_id":"define_class_method(name:String,c:MrbClass|MrbModule,proc:MrbFunc)-instance-method","name":"define_class_method","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MrbClass | MrbModule"},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"MrbFunc"}],"args_string":"(name : String, c : MrbClass | MrbModule, proc : MrbFunc)","args_html":"(name : String, c : <a href=\"MrbClass.html\">MrbClass</a> | <a href=\"MrbModule.html\">MrbModule</a>, proc : <a href=\"MrbFunc.html\">MrbFunc</a>)","location":{"filename":"src/MrbState.cr","line_number":48,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbState.cr#L48"},"def":{"name":"define_class_method","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MrbClass | MrbModule"},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"MrbFunc"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if c.is_a?(MrbModule)\n  MrbInternal.mrb_define_module_function(@mrb_ptr, c, name, proc, 1)\nelse\n  MrbInternal.mrb_define_class_method(@mrb_ptr, c, name, proc, 1)\nend"}},{"id":"define_method(name:String,c:MrbClass|MrbModule,proc:MrbFunc)-instance-method","html_id":"define_method(name:String,c:MrbClass|MrbModule,proc:MrbFunc)-instance-method","name":"define_method","doc":"TODO: Use internal mruby arg count in future versions","summary":"<p><span class=\"flag orange\">TODO</span>  Use internal mruby arg count in future versions</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MrbClass | MrbModule"},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"MrbFunc"}],"args_string":"(name : String, c : MrbClass | MrbModule, proc : MrbFunc)","args_html":"(name : String, c : <a href=\"MrbClass.html\">MrbClass</a> | <a href=\"MrbModule.html\">MrbModule</a>, proc : <a href=\"MrbFunc.html\">MrbFunc</a>)","location":{"filename":"src/MrbState.cr","line_number":32,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbState.cr#L32"},"def":{"name":"define_method","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"MrbClass | MrbModule"},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"MrbFunc"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if c.is_a?(MrbModule)\n  raise(\"Tried to define method #{name} for MrbModule #{c}\")\nelse\n  MrbInternal.mrb_define_method(@mrb_ptr, c, name, proc, 1)\nend"}},{"id":"define_module_function(name:String,mod:MrbModule|MrbClass,proc:MrbFunc)-instance-method","html_id":"define_module_function(name:String,mod:MrbModule|MrbClass,proc:MrbFunc)-instance-method","name":"define_module_function","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"mod","doc":null,"default_value":"","external_name":"mod","restriction":"MrbModule | MrbClass"},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"MrbFunc"}],"args_string":"(name : String, mod : MrbModule | MrbClass, proc : MrbFunc)","args_html":"(name : String, mod : <a href=\"MrbModule.html\">MrbModule</a> | <a href=\"MrbClass.html\">MrbClass</a>, proc : <a href=\"MrbFunc.html\">MrbFunc</a>)","location":{"filename":"src/MrbState.cr","line_number":40,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbState.cr#L40"},"def":{"name":"define_module_function","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"mod","doc":null,"default_value":"","external_name":"mod","restriction":"MrbModule | MrbClass"},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":"MrbFunc"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if mod.is_a?(MrbModule)\n  MrbInternal.mrb_define_module_function(@mrb_ptr, mod, name, proc, 1)\nelse\n  MrbInternal.mrb_define_class_method(@mrb_ptr, mod, name, proc, 1)\nend"}},{"id":"execute_script_line(str:String)-instance-method","html_id":"execute_script_line(str:String)-instance-method","name":"execute_script_line","doc":null,"summary":null,"abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(str : String)","args_html":"(str : String)","location":{"filename":"src/MrbState.cr","line_number":23,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbState.cr#L23"},"def":{"name":"execute_script_line","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MrbInternal.execute_script_line(@mrb_ptr, str)"}},{"id":"load_script_from_file(filename:String)-instance-method","html_id":"load_script_from_file(filename:String)-instance-method","name":"load_script_from_file","doc":null,"summary":null,"abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"}],"args_string":"(filename : String)","args_html":"(filename : String)","location":{"filename":"src/MrbState.cr","line_number":27,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbState.cr#L27"},"def":{"name":"load_script_from_file","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MrbInternal.load_script_from_file(@mrb_ptr, filename)"}},{"id":"to_unsafe-instance-method","html_id":"to_unsafe-instance-method","name":"to_unsafe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/MrbState.cr","line_number":19,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbState.cr#L19"},"def":{"name":"to_unsafe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"return @mrb_ptr"}}],"macros":[],"types":[]},{"html_id":"anyolite/MrbTypeCache","path":"MrbTypeCache.html","kind":"module","full_name":"MrbTypeCache","name":"MrbTypeCache","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbTypeCache.cr","line_number":2,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbTypeCache.cr#L2"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Cache for mruby data types, holding the destructor methods","summary":"<p>Cache for mruby data types, holding the destructor methods</p>","class_methods":[{"id":"register(crystal_class:Class,destructor:Proc(Pointer(MrbInternal::MrbState),Pointer(Void),Void))-class-method","html_id":"register(crystal_class:Class,destructor:Proc(Pointer(MrbInternal::MrbState),Pointer(Void),Void))-class-method","name":"register","doc":null,"summary":null,"abstract":false,"args":[{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":"Class"},{"name":"destructor","doc":null,"default_value":"","external_name":"destructor","restriction":"Proc(::Pointer(MrbInternal::MrbState), ::Pointer(Void), Void)"}],"args_string":"(crystal_class : Class, destructor : Proc(Pointer(MrbInternal::MrbState), Pointer(Void), Void))","args_html":"(crystal_class : Class, destructor : Proc(Pointer(MrbInternal::MrbState), Pointer(Void), Void))","location":{"filename":"src/MrbTypeCache.cr","line_number":5,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbTypeCache.cr#L5"},"def":{"name":"register","args":[{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":"Class"},{"name":"destructor","doc":null,"default_value":"","external_name":"destructor","restriction":"Proc(::Pointer(MrbInternal::MrbState), ::Pointer(Void), Void)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @@cache[crystal_class.name]?\nelse\n  new_type = MrbInternal::MrbDataType.new(struct_name: crystal_class.name, dfree: destructor)\n  @@cache[crystal_class.name] = Pointer(MrbInternal::MrbDataType).malloc(size: 1, value: new_type)\nend\nreturn @@cache[crystal_class.name]\n"}}],"constructors":[],"instance_methods":[],"macros":[{"id":"destructor_method(crystal_class)-macro","html_id":"destructor_method(crystal_class)-macro","name":"destructor_method","doc":null,"summary":null,"abstract":false,"args":[{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""}],"args_string":"(crystal_class)","location":{"filename":"src/MrbTypeCache.cr","line_number":13,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbTypeCache.cr#L13"},"def":{"name":"destructor_method","args":[{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    ->(mrb : MrbInternal::MrbState*, ptr : Void*) \n{\n      if \n{{ crystal_class }}\n <= Struct\n        crystal_ptr = ptr.as(MrbWrap::StructWrapper(\n{{ crystal_class }}\n)*)\n\n        \n# Call optional mruby callback\n\n        if (crystal_value = crystal_ptr.value.content).responds_to?(:mrb_finalize)\n          crystal_value.mrb_finalize(mrb)\n        \nend\n      \nelse\n        crystal_ptr = ptr.as(\n{{ crystal_class }}\n*)\n\n        if (crystal_value = crystal_ptr.value).responds_to?(:mrb_finalize)\n          crystal_value.mrb_finalize(mrb)\n        \nend\n      \nend\n\n      \n# Delete the Crystal reference to this object\n\n      MrbRefTable.delete(MrbRefTable.get_object_id(crystal_ptr.value))\n    }\n  \n"}}],"types":[]},{"html_id":"anyolite/MrbWrap","path":"MrbWrap.html","kind":"module","full_name":"MrbWrap","name":"MrbWrap","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":16,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L16"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Undef","name":"Undef","value":"Undefined.new","doc":"Undefined mruby value.","summary":"<p>Undefined mruby value.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Main wrapper module, which should be covering most of the use cases.","summary":"<p>Main wrapper module, which should be covering most of the use cases.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"wrap(mrb_state,crystal_module_or_class,under=nil,instance_method_exclusions=[]ofString|Symbol,class_method_exclusions=[]ofString|Symbol,constant_exclusions=[]ofString|Symbol,verbose=false)-macro","html_id":"wrap(mrb_state,crystal_module_or_class,under=nil,instance_method_exclusions=[]ofString|Symbol,class_method_exclusions=[]ofString|Symbol,constant_exclusions=[]ofString|Symbol,verbose=false)-macro","name":"wrap","doc":"Wraps a whole class or module structure under a module into mruby.\n\nThe class or module *crystal_module_or_class* will be integrated \ninto the `MrbState` *mrb_state*,\nwith the optional parent module *under*.\nMethods or constants to be excluded can be specified as \n`Symbol` or `String` in the `Array` \n*class_method_exclusions* (for class methods) or \n*constant_exclusions* (for constants).\nIf *verbose* is set, wrapping information will be displayed. ","summary":"<p>Wraps a whole class or module structure under a module into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_module_or_class","doc":null,"default_value":"","external_name":"crystal_module_or_class","restriction":""},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":""},{"name":"instance_method_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"instance_method_exclusions","restriction":""},{"name":"class_method_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"class_method_exclusions","restriction":""},{"name":"constant_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"constant_exclusions","restriction":""},{"name":"verbose","doc":null,"default_value":"false","external_name":"verbose","restriction":""}],"args_string":"(mrb_state, crystal_module_or_class, under = <span class=\"n\">nil</span>, instance_method_exclusions = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">String</span> <span class=\"o\">|</span> <span class=\"t\">Symbol</span>, class_method_exclusions = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">String</span> <span class=\"o\">|</span> <span class=\"t\">Symbol</span>, constant_exclusions = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">String</span> <span class=\"o\">|</span> <span class=\"t\">Symbol</span>, verbose = <span class=\"n\">false</span>)","location":{"filename":"src/MrbWrap.cr","line_number":399,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L399"},"def":{"name":"wrap","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_module_or_class","doc":null,"default_value":"","external_name":"crystal_module_or_class","restriction":""},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":""},{"name":"instance_method_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"instance_method_exclusions","restriction":""},{"name":"class_method_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"class_method_exclusions","restriction":""},{"name":"constant_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"constant_exclusions","restriction":""},{"name":"verbose","doc":null,"default_value":"false","external_name":"verbose","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n    \n{% if !crystal_module_or_class.is_a?(Path) %}\n      {% puts(\"\\e[31m> WARNING: Object #{crystal_module_or_class} of #{crystal_module_or_class.class_name.id} is neither a class nor module, so it will be skipped\\e[0m\") %}\n    {% else %}{% if crystal_module_or_class.resolve.module? %}\n      MrbWrap.wrap_module_with_methods({{ mrb_state }}, {{ crystal_module_or_class }}, under: {{ under }},\n        class_method_exclusions: {{ class_method_exclusions }},\n        constant_exclusions: {{ constant_exclusions }},\n        verbose: {{ verbose }}\n      )\n    {% else %}{% if crystal_module_or_class.resolve.class? || crystal_module_or_class.resolve.struct? %}\n      MrbWrap.wrap_class_with_methods({{ mrb_state }}, {{ crystal_module_or_class }}, under: {{ under }},\n        instance_method_exclusions: {{ instance_method_exclusions }},\n        class_method_exclusions: {{ class_method_exclusions }},\n        constant_exclusions: {{ constant_exclusions }},\n        verbose: {{ verbose }}\n      )\n    {% else %}{% if crystal_module_or_class.resolve.union? %}\n      {% puts(\"\\e[31m> WARNING: Wrapping of unions not supported, thus skipping #{crystal_module_or_class}\\e[0m\") %}\n    {% else %}{% if crystal_module_or_class.resolve < Enum %}\n      MrbWrap.wrap_class_with_methods({{ mrb_state }}, {{ crystal_module_or_class }}, under: {{ under }},\n        instance_method_exclusions: {{ instance_method_exclusions }},\n        class_method_exclusions: {{ class_method_exclusions }},\n        constant_exclusions: {{ constant_exclusions }},\n        use_enum_constructor: true,\n        verbose: {{ verbose }}\n      )\n    {% else %}{% if crystal_module_or_class.resolve.is_a?(TypeNode) %}\n      MrbWrap.wrap_class_with_methods({{ mrb_state }}, {{ crystal_module_or_class }}, under: {{ under }},\n        instance_method_exclusions: {{ instance_method_exclusions }},\n        class_method_exclusions: {{ class_method_exclusions }},\n        constant_exclusions: {{ constant_exclusions }},\n        verbose: {{ verbose }}\n      )\n    {% else %}\n      {% puts(\"\\e[31m> WARNING: Could not resolve #{crystal_module_or_class}, so it will be skipped\\e[0m\") %}\n    {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n\n  \n"}},{"id":"wrap_class(mrb_state,crystal_class,name,under=nil,superclass=nil)-macro","html_id":"wrap_class(mrb_state,crystal_class,name,under=nil,superclass=nil)-macro","name":"wrap_class","doc":"Wraps a Crystal class directly into an mruby class.\n\nThe Crystal `Class` *crystal_class* will be integrated into the `MrbState` *mrb_state*,\nwith *name* as its new designation, returning an `MrbClass`.\n\nTo inherit from another mruby class, specify an `MrbClass` as a *superclass*.\n\nEach class can be defined in a specifiy module by setting *under* to a `MrbModule`.","summary":"<p>Wraps a Crystal class directly into an mruby class.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":""},{"name":"superclass","doc":null,"default_value":"nil","external_name":"superclass","restriction":""}],"args_string":"(mrb_state, crystal_class, name, under = <span class=\"n\">nil</span>, superclass = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":68,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L68"},"def":{"name":"wrap_class","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":""},{"name":"superclass","doc":null,"default_value":"nil","external_name":"superclass","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    new_class = MrbClass.new(\n{{ mrb_state }}\n, \n{{ name }}\n, under: MrbClassCache.get(\n{{ under }}\n), superclass: MrbClassCache.get(\n{{ superclass }}\n))\n    MrbInternal.set_instance_tt_as_data(new_class)\n    MrbClassCache.register(\n{{ crystal_class }}\n, new_class)\n    MrbClassCache.get(\n{{ crystal_class }}\n)\n  \n"}},{"id":"wrap_class_method(mrb_state,crystal_class,name,proc,proc_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_class_method(mrb_state,crystal_class,name,proc,proc_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_class_method","doc":"Wraps a class method into mruby.\n\nThe class method *proc* of the Crystal `Class` *crystal_class* will be integrated into the `MrbState` *mrb_state*,\nwith the arguments *proc_args* as an `Array of Class`.\n\nIts new name will be *name*.\n\nThe value *operator* will append the specified `String`\nto the final name and *context* can give the function a `Path` for resolving types correctly.","summary":"<p>Wraps a class method into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"proc_args","doc":null,"default_value":"nil","external_name":"proc_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, name, proc, proc_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":144,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L144"},"def":{"name":"wrap_class_method","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"proc_args","doc":null,"default_value":"nil","external_name":"proc_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbMacro.wrap_class_method_with_args(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n, \n{{ name }}\n, \n{{ proc }}\n, \n{{ proc_args }}\n, operator: \n{{ operator }}\n, context: \n{{ context }}\n)\n  \n"}},{"id":"wrap_class_method_with_keywords(mrb_state,crystal_class,name,proc,keyword_args,regular_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_class_method_with_keywords(mrb_state,crystal_class,name,proc,keyword_args,regular_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_class_method_with_keywords","doc":"Wraps a class method into mruby, using keyword arguments.\n\nThe class method *proc* of the Crystal `Class` *crystal_class* will be integrated into the `MrbState` *mrb_state*,\nwith the arguments *regular_args* as an `Array of Class` and *keyword_args* as an `Array of TypeDeclaration`.\n\nIts new name will be *name*.\n\nThe value *operator* will append the specified `String`\nto the final name and *context* can give the function a `Path` for resolving types correctly.","summary":"<p>Wraps a class method into mruby, using keyword arguments.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, name, proc, keyword_args, regular_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":157,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L157"},"def":{"name":"wrap_class_method_with_keywords","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbMacro.wrap_class_method_with_keyword_args(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n, \n{{ name }}\n, \n{{ proc }}\n, \n{{ keyword_args }}\n, \n{{ regular_args }}\n, operator: \n{{ operator }}\n, context: \n{{ context }}\n)\n  \n"}},{"id":"wrap_class_with_methods(mrb_state,crystal_class,under=nil,instance_method_exclusions=[]ofString|Symbol,class_method_exclusions=[]ofString|Symbol,constant_exclusions=[]ofString|Symbol,use_enum_constructor=false,verbose=false)-macro","html_id":"wrap_class_with_methods(mrb_state,crystal_class,under=nil,instance_method_exclusions=[]ofString|Symbol,class_method_exclusions=[]ofString|Symbol,constant_exclusions=[]ofString|Symbol,use_enum_constructor=false,verbose=false)-macro","name":"wrap_class_with_methods","doc":"Wraps a whole class structure under a module into mruby.\n\nThe `Class` *crystal_class* will be integrated into the `MrbState` *mrb_state*,\nwith the optional parent module *under*.\nMethods or constants to be excluded can be specified as \n`Symbol` or `String` in the `Array` \n*instance_method_exclusions* (for instance methods),\n*class_method_exclusions* (for class methods) or \n*constant_exclusions* (for constants).\nEnum classes can be wrapped by setting *use_enum_constructor*.\nIf *verbose* is set, wrapping information will be displayed.","summary":"<p>Wraps a whole class structure under a module into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":""},{"name":"instance_method_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"instance_method_exclusions","restriction":""},{"name":"class_method_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"class_method_exclusions","restriction":""},{"name":"constant_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"constant_exclusions","restriction":""},{"name":"use_enum_constructor","doc":null,"default_value":"false","external_name":"use_enum_constructor","restriction":""},{"name":"verbose","doc":null,"default_value":"false","external_name":"verbose","restriction":""}],"args_string":"(mrb_state, crystal_class, under = <span class=\"n\">nil</span>, instance_method_exclusions = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">String</span> <span class=\"o\">|</span> <span class=\"t\">Symbol</span>, class_method_exclusions = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">String</span> <span class=\"o\">|</span> <span class=\"t\">Symbol</span>, constant_exclusions = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">String</span> <span class=\"o\">|</span> <span class=\"t\">Symbol</span>, use_enum_constructor = <span class=\"n\">false</span>, verbose = <span class=\"n\">false</span>)","location":{"filename":"src/MrbWrap.cr","line_number":324,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L324"},"def":{"name":"wrap_class_with_methods","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":""},{"name":"instance_method_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"instance_method_exclusions","restriction":""},{"name":"class_method_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"class_method_exclusions","restriction":""},{"name":"constant_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"constant_exclusions","restriction":""},{"name":"use_enum_constructor","doc":null,"default_value":"false","external_name":"use_enum_constructor","restriction":""},{"name":"verbose","doc":null,"default_value":"false","external_name":"verbose","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if verbose %}\n      {% puts(\">>> Going into class #{crystal_class} under #{under}\\n\\n\") %}\n    {% end %}\n\n\n    \n{% if crystal_class.is_a?(Generic) %}\n      {% if verbose\n  puts(\"> Wrapping of generics not supported, thus skipping #{crystal_class}\\e[0m\\n\\n\")\nend %}\n    {% else %}\n      {% resolved_class = crystal_class.resolve %}\n\n      {% new_context = crystal_class %}\n\n      {% if resolved_class.annotation(MrbWrap::RenameClass) %}\n        {% actual_name = (resolved_class.annotation(MrbWrap::RenameClass))[0] %}\n      {% else %}\n        {% actual_name = crystal_class.names.last.stringify %}\n      {% end %}\n\n      MrbWrap.wrap_class({{ mrb_state }}, {{ resolved_class }}, {{ actual_name }}, under: {{ under }})\n\n      MrbMacro.wrap_all_instance_methods({{ mrb_state }}, {{ crystal_class }}, {{ instance_method_exclusions }}, \n        {{ verbose }}, context: {{ new_context }}, use_enum_constructor: {{ use_enum_constructor }})\n      MrbMacro.wrap_all_class_methods({{ mrb_state }}, {{ crystal_class }}, {{ class_method_exclusions }}, {{ verbose }}, context: {{ new_context }})\n      MrbMacro.wrap_all_constants({{ mrb_state }}, {{ crystal_class }}, {{ constant_exclusions }}, {{ verbose }}, context: {{ new_context }})\n    {% end %}\n\n  \n"}},{"id":"wrap_constant(mrb_state,under_module,name,crystal_value)-macro","html_id":"wrap_constant(mrb_state,under_module,name,crystal_value)-macro","name":"wrap_constant","doc":"Wraps a constant value under a module into mruby.\n\nThe value *crystal_value* will be integrated into the `MrbState` *mrb_state*,\nwith the name *name* and the parent module *under_module*.","summary":"<p>Wraps a constant value under a module into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_module","doc":null,"default_value":"","external_name":"under_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"crystal_value","doc":null,"default_value":"","external_name":"crystal_value","restriction":""}],"args_string":"(mrb_state, under_module, name, crystal_value)","location":{"filename":"src/MrbWrap.cr","line_number":230,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L230"},"def":{"name":"wrap_constant","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_module","doc":null,"default_value":"","external_name":"under_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"crystal_value","doc":null,"default_value":"","external_name":"crystal_value","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbInternal.mrb_define_const(\n{{ mrb_state }}\n, MrbClassCache.get(\n{{ under_module }}\n), \n{{ name }}\n, MrbCast.return_value(\n{{ mrb_state }}\n.to_unsafe, \n{{ crystal_value }}\n))\n  \n"}},{"id":"wrap_constant_under_class(mrb_state,under_class,name,crystal_value)-macro","html_id":"wrap_constant_under_class(mrb_state,under_class,name,crystal_value)-macro","name":"wrap_constant_under_class","doc":"Wraps a constant value under a class into mruby.\n\nThe value *crystal_value* will be integrated into the `MrbState` *mrb_state*,\nwith the name *name* and the parent `Class` *under_class*.","summary":"<p>Wraps a constant value under a class into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_class","doc":null,"default_value":"","external_name":"under_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"crystal_value","doc":null,"default_value":"","external_name":"crystal_value","restriction":""}],"args_string":"(mrb_state, under_class, name, crystal_value)","location":{"filename":"src/MrbWrap.cr","line_number":238,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L238"},"def":{"name":"wrap_constant_under_class","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_class","doc":null,"default_value":"","external_name":"under_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"crystal_value","doc":null,"default_value":"","external_name":"crystal_value","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbInternal.mrb_define_const(\n{{ mrb_state }}\n, MrbClassCache.get(\n{{ under_class }}\n), \n{{ name }}\n, MrbCast.return_value(\n{{ mrb_state }}\n.to_unsafe, \n{{ crystal_value }}\n))\n  \n"}},{"id":"wrap_constructor(mrb_state,crystal_class,proc_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_constructor(mrb_state,crystal_class,proc_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_constructor","doc":"Wraps the constructor of a Crystal class into mruby.\n\nThe constructor for the Crystal `Class` *crystal_class* will be integrated into the `MrbState` *mrb_state*,\nwith the arguments *proc_args* as an `Array of Class`. \n\nThe value *operator* will append the specified `String`\nto the final name and *context* can give the function a `Path` for resolving types correctly.","summary":"<p>Wraps the constructor of a Crystal class into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"proc_args","doc":null,"default_value":"nil","external_name":"proc_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, proc_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":94,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L94"},"def":{"name":"wrap_constructor","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"proc_args","doc":null,"default_value":"nil","external_name":"proc_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbMacro.wrap_constructor_function_with_args(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n, \n{{ crystal_class }}\n.new, \n{{ proc_args }}\n, operator: \n{{ operator }}\n, context: \n{{ context }}\n)\n  \n"}},{"id":"wrap_constructor_with_keywords(mrb_state,crystal_class,keyword_args,regular_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_constructor_with_keywords(mrb_state,crystal_class,keyword_args,regular_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_constructor_with_keywords","doc":"Wraps the constructor of a Crystal class into mruby, using keyword arguments.\n\nThe constructor for the Crystal `Class` *crystal_class* will be integrated into the `MrbState` *mrb_state*,\nwith the arguments *regular_args* as an `Array of Class` and *keyword_args* as an `Array of TypeDeclaration`.\n\nThe value *operator* will append the specified `String`\nto the final name and *context* can give the function a `Path` for resolving types correctly.","summary":"<p>Wraps the constructor of a Crystal class into mruby, using keyword arguments.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, keyword_args, regular_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":105,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L105"},"def":{"name":"wrap_constructor_with_keywords","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbMacro.wrap_constructor_function_with_keyword_args(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n, \n{{ crystal_class }}\n.new, \n{{ keyword_args }}\n, \n{{ regular_args }}\n, operator: \n{{ operator }}\n, context: \n{{ context }}\n)\n  \n"}},{"id":"wrap_getter(mrb_state,crystal_class,name,proc,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_getter(mrb_state,crystal_class,name,proc,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_getter","doc":"Wraps a getter into mruby.\n\nThe getter *proc* of the Crystal `Class` *crystal_class* will be integrated into the `MrbState` *mrb_state*.\n\nIts new name will be *name*.\n\nThe value *operator* will append the specified `String`\nto the final name and *context* can give the function a `Path` for resolving types correctly.","summary":"<p>Wraps a getter into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, name, proc, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":208,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L208"},"def":{"name":"wrap_getter","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbMacro.wrap_instance_function_with_args(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n, \n{{ name }}\n, \n{{ proc }}\n, operator: \n{{ operator }}\n, context: \n{{ context }}\n)\n  \n"}},{"id":"wrap_instance_method(mrb_state,crystal_class,name,proc,proc_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_instance_method(mrb_state,crystal_class,name,proc,proc_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_instance_method","doc":"Wraps an instance method into mruby.\n\nThe instance method *proc* of the Crystal `Class` *crystal_class* will be integrated into the `MrbState` *mrb_state*,\nwith the arguments *proc_args* as an `Array of Class`.\n\nIts new name will be *name*.\n\nThe value *operator* will append the specified `String`\nto the final name and *context* can give the function a `Path` for resolving types correctly.","summary":"<p>Wraps an instance method into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"proc_args","doc":null,"default_value":"nil","external_name":"proc_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, name, proc, proc_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":170,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L170"},"def":{"name":"wrap_instance_method","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"proc_args","doc":null,"default_value":"nil","external_name":"proc_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbMacro.wrap_instance_function_with_args(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n, \n{{ name }}\n, \n{{ proc }}\n, \n{{ proc_args }}\n, operator: \n{{ operator }}\n, context: \n{{ context }}\n)\n  \n"}},{"id":"wrap_instance_method_with_keywords(mrb_state,crystal_class,name,proc,keyword_args,regular_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_instance_method_with_keywords(mrb_state,crystal_class,name,proc,keyword_args,regular_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_instance_method_with_keywords","doc":"Wraps an instance method into mruby, using keyword arguments.\n\nThe instance method *proc* of the Crystal `Class` *crystal_class* will be integrated into the `MrbState` *mrb_state*,\nwith the arguments *regular_args* as an `Array of Class` and *keyword_args* as an `Array of TypeDeclaration`.\n\nIts new name will be *name*.\n\nThe value *operator* will append the specified `String`\nto the final name and *context* can give the function a `Path` for resolving types correctly.","summary":"<p>Wraps an instance method into mruby, using keyword arguments.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, name, proc, keyword_args, regular_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":183,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L183"},"def":{"name":"wrap_instance_method_with_keywords","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbMacro.wrap_instance_function_with_keyword_args(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n, \n{{ name }}\n, \n{{ proc }}\n, \n{{ keyword_args }}\n, \n{{ regular_args }}\n, operator: \n{{ operator }}\n, context: \n{{ context }}\n)\n  \n"}},{"id":"wrap_module(mrb_state,crystal_module,name,under=nil)-macro","html_id":"wrap_module(mrb_state,crystal_module,name,under=nil)-macro","name":"wrap_module","doc":"Wraps a Crystal module into an mruby module.\n\nThe module *crystal_module* will be integrated into the `MrbState` *mrb_state*,\nwith *name* as its new designation, returning an `MrbModule`.\n\nThe parent module can be specified with the module argument *under*.","summary":"<p>Wraps a Crystal module into an mruby module.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_module","doc":null,"default_value":"","external_name":"crystal_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":""}],"args_string":"(mrb_state, crystal_module, name, under = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":81,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L81"},"def":{"name":"wrap_module","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_module","doc":null,"default_value":"","external_name":"crystal_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    new_module = MrbModule.new(\n{{ mrb_state }}\n, \n{{ name }}\n, under: MrbClassCache.get(\n{{ under }}\n))\n    MrbClassCache.register(\n{{ crystal_module }}\n, new_module)\n    MrbClassCache.get(\n{{ crystal_module }}\n)\n  \n"}},{"id":"wrap_module_function(mrb_state,under_module,name,proc,proc_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_module_function(mrb_state,under_module,name,proc,proc_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_module_function","doc":"Wraps a module function into mruby.\n\nThe function *proc* under the module *under_module* will be integrated into the `MrbState` *mrb_state*,\nwith the arguments *proc_args* as an `Array of Class`.\n\nIts new name will be *name*.\n\nThe value *operator* will append the specified `String`\nto the final name and *context* can give the function a `Path` for resolving types correctly.","summary":"<p>Wraps a module function into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_module","doc":null,"default_value":"","external_name":"under_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"proc_args","doc":null,"default_value":"nil","external_name":"proc_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, under_module, name, proc, proc_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":118,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L118"},"def":{"name":"wrap_module_function","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_module","doc":null,"default_value":"","external_name":"under_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"proc_args","doc":null,"default_value":"nil","external_name":"proc_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbMacro.wrap_module_function_with_args(\n{{ mrb_state }}\n, \n{{ under_module }}\n, \n{{ name }}\n, \n{{ proc }}\n, \n{{ proc_args }}\n, operator: \n{{ operator }}\n, context: \n{{ context }}\n)\n  \n"}},{"id":"wrap_module_function_with_keywords(mrb_state,under_module,name,proc,keyword_args,regular_args=nil,operator=&quot;&quot;,context=nil)-macro","html_id":"wrap_module_function_with_keywords(mrb_state,under_module,name,proc,keyword_args,regular_args=nil,operator=&amp;quot;&amp;quot;,context=nil)-macro","name":"wrap_module_function_with_keywords","doc":"Wraps a module function into mruby, using keyword arguments.\n\nThe function *proc* under the module *under_module* will be integrated into the `MrbState` *mrb_state*,\nwith the arguments *regular_args* as an `Array of Class` and *keyword_args* as an `Array of TypeDeclaration`.\n\nIts new name will be *name*.\n\nThe value *operator* will append the specified `String`\nto the final name and *context* can give the function a `Path` for resolving types correctly.","summary":"<p>Wraps a module function into mruby, using keyword arguments.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_module","doc":null,"default_value":"","external_name":"under_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, under_module, name, proc, keyword_args, regular_args = <span class=\"n\">nil</span>, operator = <span class=\"s\">&quot;&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":131,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L131"},"def":{"name":"wrap_module_function_with_keywords","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"under_module","doc":null,"default_value":"","external_name":"under_module","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"keyword_args","doc":null,"default_value":"","external_name":"keyword_args","restriction":""},{"name":"regular_args","doc":null,"default_value":"nil","external_name":"regular_args","restriction":""},{"name":"operator","doc":null,"default_value":"\"\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbMacro.wrap_module_function_with_keyword_args(\n{{ mrb_state }}\n, \n{{ under_module }}\n, \n{{ name }}\n, \n{{ proc }}\n, \n{{ keyword_args }}\n, \n{{ regular_args }}\n, operator: \n{{ operator }}\n, context: \n{{ context }}\n)\n  \n"}},{"id":"wrap_module_with_methods(mrb_state,crystal_module,under=nil,class_method_exclusions=[]ofString|Symbol,constant_exclusions=[]ofString|Symbol,verbose=false)-macro","html_id":"wrap_module_with_methods(mrb_state,crystal_module,under=nil,class_method_exclusions=[]ofString|Symbol,constant_exclusions=[]ofString|Symbol,verbose=false)-macro","name":"wrap_module_with_methods","doc":"Wraps a whole module structure under a module into mruby.\n\nThe module *crystal_module* will be integrated into the `MrbState` *mrb_state*,\nwith the optional parent module *under*.\nMethods or constants to be excluded can be specified as \n`Symbol` or `String` in the `Array` \n*class_method_exclusions* (for class methods) or \n*constant_exclusions* (for constants).\nIf *verbose* is set, wrapping information will be displayed.","summary":"<p>Wraps a whole module structure under a module into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_module","doc":null,"default_value":"","external_name":"crystal_module","restriction":""},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":""},{"name":"class_method_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"class_method_exclusions","restriction":""},{"name":"constant_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"constant_exclusions","restriction":""},{"name":"verbose","doc":null,"default_value":"false","external_name":"verbose","restriction":""}],"args_string":"(mrb_state, crystal_module, under = <span class=\"n\">nil</span>, class_method_exclusions = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">String</span> <span class=\"o\">|</span> <span class=\"t\">Symbol</span>, constant_exclusions = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">String</span> <span class=\"o\">|</span> <span class=\"t\">Symbol</span>, verbose = <span class=\"n\">false</span>)","location":{"filename":"src/MrbWrap.cr","line_number":366,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L366"},"def":{"name":"wrap_module_with_methods","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_module","doc":null,"default_value":"","external_name":"crystal_module","restriction":""},{"name":"under","doc":null,"default_value":"nil","external_name":"under","restriction":""},{"name":"class_method_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"class_method_exclusions","restriction":""},{"name":"constant_exclusions","doc":null,"default_value":"[] of String | Symbol","external_name":"constant_exclusions","restriction":""},{"name":"verbose","doc":null,"default_value":"false","external_name":"verbose","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if verbose %}\n      {% puts(\">>> Going into module #{crystal_module} under #{under}\\n\\n\") %}\n    {% end %}\n\n\n    \n{% new_context = crystal_module %}\n\n\n    \n{% if crystal_module.resolve.annotation(MrbWrap::RenameModule) %}\n      {% actual_name = (crystal_module.resolve.annotation(MrbWrap::RenameModule))[0] %}\n    {% else %}\n      {% actual_name = crystal_module.names.last.stringify %}\n    {% end %}\n\n\n    MrbWrap.wrap_module(\n{{ mrb_state }}\n, \n{{ crystal_module.resolve }}\n, \n{{ actual_name }}\n, under: \n{{ under }}\n)\n\n    MrbMacro.wrap_all_class_methods(\n{{ mrb_state }}\n, \n{{ crystal_module }}\n, \n{{ class_method_exclusions }}\n, \n{{ verbose }}\n, context: \n{{ new_context }}\n)\n    MrbMacro.wrap_all_constants(\n{{ mrb_state }}\n, \n{{ crystal_module }}\n, \n{{ constant_exclusions }}\n, \n{{ verbose }}\n, context: \n{{ new_context }}\n)\n  \n"}},{"id":"wrap_property(mrb_state,crystal_class,name,proc,proc_arg,operator_getter=&quot;&quot;,operator_setter=&quot;=&quot;,context=nil)-macro","html_id":"wrap_property(mrb_state,crystal_class,name,proc,proc_arg,operator_getter=&amp;quot;&amp;quot;,operator_setter=&amp;quot;=&amp;quot;,context=nil)-macro","name":"wrap_property","doc":"Wraps a property into mruby.\n\nThe property *proc* of the Crystal `Class` *crystal_class* will be integrated into the `MrbState` *mrb_state*,\nwith the argument *proc_arg* as its respective `Class`.\n\nIts new name will be *name*.\n\nThe values *operator_getter* and *operator_setter* will append the specified `String`\nto the final names and *context* can give the function a `Path` for resolving types correctly.","summary":"<p>Wraps a property into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"proc_arg","doc":null,"default_value":"","external_name":"proc_arg","restriction":""},{"name":"operator_getter","doc":null,"default_value":"\"\"","external_name":"operator_getter","restriction":""},{"name":"operator_setter","doc":null,"default_value":"\"=\"","external_name":"operator_setter","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, name, proc, proc_arg, operator_getter = <span class=\"s\">&quot;&quot;</span>, operator_setter = <span class=\"s\">&quot;=&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":221,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L221"},"def":{"name":"wrap_property","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"proc_arg","doc":null,"default_value":"","external_name":"proc_arg","restriction":""},{"name":"operator_getter","doc":null,"default_value":"\"\"","external_name":"operator_getter","restriction":""},{"name":"operator_setter","doc":null,"default_value":"\"=\"","external_name":"operator_setter","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbWrap.wrap_getter(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n, \n{{ name }}\n, \n{{ proc }}\n, operator: \n{{ operator_getter }}\n, context: \n{{ context }}\n)\n    MrbWrap.wrap_setter(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n, \n{{ name + \"=\" }}\n, \n{{ proc }}\n, \n{{ proc_arg }}\n, operator: \n{{ operator_setter }}\n, context: \n{{ context }}\n)\n  \n"}},{"id":"wrap_setter(mrb_state,crystal_class,name,proc,proc_arg,operator=&quot;=&quot;,context=nil)-macro","html_id":"wrap_setter(mrb_state,crystal_class,name,proc,proc_arg,operator=&amp;quot;=&amp;quot;,context=nil)-macro","name":"wrap_setter","doc":"Wraps a setter into mruby.\n\nThe setter *proc* (without the `=`) of the Crystal `Class` *crystal_class* will be integrated into the `MrbState` *mrb_state*,\nwith the argument *proc_arg* as its respective `Class`.\n\nIts new name will be *name*.\n\nThe value *operator* will append the specified `String`\nto the final name and *context* can give the function a `Path` for resolving types correctly.","summary":"<p>Wraps a setter into mruby.</p>","abstract":false,"args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"proc_arg","doc":null,"default_value":"","external_name":"proc_arg","restriction":""},{"name":"operator","doc":null,"default_value":"\"=\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"args_string":"(mrb_state, crystal_class, name, proc, proc_arg, operator = <span class=\"s\">&quot;=&quot;</span>, context = <span class=\"n\">nil</span>)","location":{"filename":"src/MrbWrap.cr","line_number":196,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L196"},"def":{"name":"wrap_setter","args":[{"name":"mrb_state","doc":null,"default_value":"","external_name":"mrb_state","restriction":""},{"name":"crystal_class","doc":null,"default_value":"","external_name":"crystal_class","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""},{"name":"proc","doc":null,"default_value":"","external_name":"proc","restriction":""},{"name":"proc_arg","doc":null,"default_value":"","external_name":"proc_arg","restriction":""},{"name":"operator","doc":null,"default_value":"\"=\"","external_name":"operator","restriction":""},{"name":"context","doc":null,"default_value":"nil","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    MrbMacro.wrap_instance_function_with_args(\n{{ mrb_state }}\n, \n{{ crystal_class }}\n, \n{{ name }}\n, \n{{ proc }}\n, \n{{ proc_arg }}\n, operator: \n{{ operator }}\n, context: \n{{ context }}\n)\n  \n"}}],"types":[{"html_id":"anyolite/MrbWrap/Empty","path":"MrbWrap/Empty.html","kind":"struct","full_name":"MrbWrap::Empty","name":"Empty","abstract":false,"superclass":{"html_id":"anyolite/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"anyolite/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"anyolite/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"anyolite/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/MrbWrap.cr","line_number":28,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L28"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Use this special constant in case of a function to wrap, which has only an operator as a name.","summary":"<p>Use this special constant in case of a function to wrap, which has only an operator as a name.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/Exclude","path":"MrbWrap/Exclude.html","kind":"annotation","full_name":"MrbWrap::Exclude","name":"Exclude","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":246,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L246"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Excludes the function from wrapping.","summary":"<p>Excludes the function from wrapping.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/ExcludeClassMethod","path":"MrbWrap/ExcludeClassMethod.html","kind":"annotation","full_name":"MrbWrap::ExcludeClassMethod","name":"ExcludeClassMethod","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":252,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L252"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Excludes the class method given as the first argument from wrapping.","summary":"<p>Excludes the class method given as the first argument from wrapping.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/ExcludeConstant","path":"MrbWrap/ExcludeConstant.html","kind":"annotation","full_name":"MrbWrap::ExcludeConstant","name":"ExcludeConstant","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":255,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L255"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Excludes the constant given as the first argument from wrapping.","summary":"<p>Excludes the constant given as the first argument from wrapping.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/ExcludeInstanceMethod","path":"MrbWrap/ExcludeInstanceMethod.html","kind":"annotation","full_name":"MrbWrap::ExcludeInstanceMethod","name":"ExcludeInstanceMethod","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":249,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L249"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Excludes the instance method given as the first argument from wrapping.","summary":"<p>Excludes the instance method given as the first argument from wrapping.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/Interpreted","path":"MrbWrap/Interpreted.html","kind":"alias","full_name":"MrbWrap::Interpreted","name":"Interpreted","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":18,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L18"}],"repository_name":"anyolite","program":false,"enum":false,"alias":true,"aliased":"(Bool | Float64 | Int64 | MrbWrap::Undefined | String | Nil)","aliased_html":"Bool | Float64 | Int64 | <a href=\"../MrbWrap/Undefined.html\">MrbWrap::Undefined</a> | String | Nil","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Alias for all possible mruby return types.","summary":"<p>Alias for all possible mruby return types.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/Rename","path":"MrbWrap/Rename.html","kind":"annotation","full_name":"MrbWrap::Rename","name":"Rename","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":272,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L272"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Renames the function to the first argument if wrapped.","summary":"<p>Renames the function to the first argument if wrapped.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/RenameClass","path":"MrbWrap/RenameClass.html","kind":"annotation","full_name":"MrbWrap::RenameClass","name":"RenameClass","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":287,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L287"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Renames the class to the first argument if wrapped.","summary":"<p>Renames the class to the first argument if wrapped.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/RenameClassMethod","path":"MrbWrap/RenameClassMethod.html","kind":"annotation","full_name":"MrbWrap::RenameClassMethod","name":"RenameClassMethod","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":280,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L280"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Renames the class method given as the first argument\nto the second argument if wrapped.","summary":"<p>Renames the class method given as the first argument to the second argument if wrapped.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/RenameConstant","path":"MrbWrap/RenameConstant.html","kind":"annotation","full_name":"MrbWrap::RenameConstant","name":"RenameConstant","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":284,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L284"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Renames the constant given as the first argument\nto the second argument if wrapped.","summary":"<p>Renames the constant given as the first argument to the second argument if wrapped.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/RenameInstanceMethod","path":"MrbWrap/RenameInstanceMethod.html","kind":"annotation","full_name":"MrbWrap::RenameInstanceMethod","name":"RenameInstanceMethod","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":276,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L276"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Renames the instane method given as the first argument\nto the second argument if wrapped.","summary":"<p>Renames the instane method given as the first argument to the second argument if wrapped.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/RenameModule","path":"MrbWrap/RenameModule.html","kind":"annotation","full_name":"MrbWrap::RenameModule","name":"RenameModule","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":290,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L290"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Renames the module to the first argument if wrapped.","summary":"<p>Renames the module to the first argument if wrapped.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/Specialize","path":"MrbWrap/Specialize.html","kind":"annotation","full_name":"MrbWrap::Specialize","name":"Specialize","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":259,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L259"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Excludes all definitions of this function besides this one from wrapping.\nThe optional first argument overwrites the original argument array.","summary":"<p>Excludes all definitions of this function besides this one from wrapping.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/SpecializeClassMethod","path":"MrbWrap/SpecializeClassMethod.html","kind":"annotation","full_name":"MrbWrap::SpecializeClassMethod","name":"SpecializeClassMethod","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":269,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L269"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Excludes all definitions of the class method given as the first argument \nbesides the one with the arguments given in the second argument (`nil` for none) from wrapping.\nThe optional third argument overwrites the original argument array.","summary":"<p>Excludes all definitions of the class method given as the first argument  besides the one with the arguments given in the second argument (<code>nil</code> for none) from wrapping.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/SpecializeInstanceMethod","path":"MrbWrap/SpecializeInstanceMethod.html","kind":"annotation","full_name":"MrbWrap::SpecializeInstanceMethod","name":"SpecializeInstanceMethod","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":264,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L264"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Excludes all definitions of the instance method given as the first argument \nbesides the one with the arguments given in the second argument (`nil` for none) from wrapping.\nThe optional third argument overwrites the original argument array.","summary":"<p>Excludes all definitions of the instance method given as the first argument  besides the one with the arguments given in the second argument (<code>nil</code> for none) from wrapping.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/SpecifyGenericTypes","path":"MrbWrap/SpecifyGenericTypes.html","kind":"annotation","full_name":"MrbWrap::SpecifyGenericTypes","name":"SpecifyGenericTypes","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":311,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L311"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Specifies the generic type names for the following class as its argument,\nin form of an `Array` of their names.","summary":"<p>Specifies the generic type names for the following class as its argument, in form of an <code>Array</code> of their names.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/StructWrapper","path":"MrbWrap/StructWrapper.html","kind":"class","full_name":"MrbWrap::StructWrapper(T)","name":"StructWrapper","abstract":false,"superclass":{"html_id":"anyolite/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"anyolite/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"anyolite/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/MrbWrap.cr","line_number":36,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L36"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Internal class to hide the `Struct` *T* in a special class\nto obtain all class-related properties.","summary":"<p>Internal class to hide the <code>Struct</code> <em>T</em> in a special class to obtain all class-related properties.</p>","class_methods":[],"constructors":[{"id":"new(value)-class-method","html_id":"new(value)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/MrbWrap.cr","line_number":39,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L39"},"def":{"name":"new","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = StructWrapper(T).allocate\n_.initialize(value)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"content:T-instance-method","html_id":"content:T-instance-method","name":"content","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/MrbWrap.cr","line_number":43,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L43"},"def":{"name":"content","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"if c = @content\n  c\nelse\n  raise(\"Content of struct wrapper is undefined!\")\nend"}},{"id":"content=(value)-instance-method","html_id":"content=(value)-instance-method","name":"content=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","args_html":"(value)","location":{"filename":"src/MrbWrap.cr","line_number":52,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L52"},"def":{"name":"content=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@content = value"}}],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/Undefined","path":"MrbWrap/Undefined.html","kind":"struct","full_name":"MrbWrap::Undefined","name":"Undefined","abstract":false,"superclass":{"html_id":"anyolite/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"anyolite/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"anyolite/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"anyolite/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/MrbWrap.cr","line_number":21,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L21"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Special struct representing undefined values in mruby.","summary":"<p>Special struct representing undefined values in mruby.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/WrapWithoutKeywords","path":"MrbWrap/WrapWithoutKeywords.html","kind":"annotation","full_name":"MrbWrap::WrapWithoutKeywords","name":"WrapWithoutKeywords","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":295,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L295"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Wraps all arguments of the function to positional arguments.\nThe optional argument limits the number of arguments to wrap as positional\narguments (`-1` for all arguments).","summary":"<p>Wraps all arguments of the function to positional arguments.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/WrapWithoutKeywordsClassMethod","path":"MrbWrap/WrapWithoutKeywordsClassMethod.html","kind":"annotation","full_name":"MrbWrap::WrapWithoutKeywordsClassMethod","name":"WrapWithoutKeywordsClassMethod","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":307,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L307"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Wraps all arguments of the class method given as the first argument\nto positional arguments.\nThe optional seconds argument limits the number of arguments to wrap as positional\narguments (`-1` for all arguments).","summary":"<p>Wraps all arguments of the class method given as the first argument to positional arguments.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"anyolite/MrbWrap/WrapWithoutKeywordsInstanceMethod","path":"MrbWrap/WrapWithoutKeywordsInstanceMethod.html","kind":"annotation","full_name":"MrbWrap::WrapWithoutKeywordsInstanceMethod","name":"WrapWithoutKeywordsInstanceMethod","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/MrbWrap.cr","line_number":301,"url":"https://github.com/Anyolite/anyolite/blob/v0.8.1/src/MrbWrap.cr#L301"}],"repository_name":"anyolite","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"anyolite/MrbWrap","kind":"module","full_name":"MrbWrap","name":"MrbWrap"},"doc":"Wraps all arguments of the instance method given as the first argument\nto positional arguments.\nThe optional seconds argument limits the number of arguments to wrap as positional\narguments (`-1` for all arguments).","summary":"<p>Wraps all arguments of the instance method given as the first argument to positional arguments.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}}